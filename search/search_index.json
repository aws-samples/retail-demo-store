{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Retail Demo Store","text":"<p>A sample retail web application and workshop platform intended as an educational tool for demonstrating how AWS infrastructure and services can be used to build compelling customer experiences for eCommerce, retail, and digital marketing use-cases.</p> <p> </p> <p>This project is intended for educational purposes only and not for production use.</p> <p></p> <p>The Retail Demo Store is an eCommerce reference implementation designed to showcase how AWS services can be used to build compelling shopping experiences using modern architecture and design patterns.</p> <p>At the heart of the Retail Demo Store is a collection of polyglot microservices hosted in Amazon Elastic Container Service (AWS Fargate) that represent domain constructs such as products, carts, orders, and users as well as services for search and recommendations. While the web user interface is served by Amazon CloudFront and Amazon S3.</p> <p>The architecture is supported by several managed services including Amazon Cognito, Amazon Pinpoint (Deprecated), Amazon Personalize, and Amazon OpenSearch Service (successor to Amazon Elasticsearch Service). The web user interface is built using the Vue.js framework with AWS Amplify to provide integrations with Cognito for registration/authentication and event streaming to Pinpoint and Personalize (Event Tracker). Finally, AWS CodePipeline is leveraged to demonstrate how AWS development services can be used to orchestrate the build and deployment process with the Retail Demo Store.</p> <p></p>"},{"location":"#supported-regions","title":"Supported Regions","text":"<p>The Retail Demo Store has been tested in the AWS regions indicated in the deployment instructions below.</p> Region Name Region Supported US East (N. Virginia) us-east-1 Fully supported US West (Oregon) us-west-2 Fully supported Europe (Ireland) eu-west-1 Partial support (personalized product descriptions, thematic similar product descriptions and room makeover not supported) Europe (Frankfurt) eu-central-1 Partial support (thematic similar product descriptions and room makeover not supported) Asia Pacific (Tokyo) ap-northeast-1 Partial support (personalized product descriptions and room makeover not supported) Asia Pacific (Sydney) ap-southeast-2 Partial support (personalized product descriptions and thematic similar product descriptions not supported) <p>Note</p> <p>Additional regions may be supported depending on service availability and having the Retail Demo Store's deployment resources staged to an S3 bucket in the targeted region.</p>"},{"location":"Available%20Demos/","title":"Available Demos","text":"<p>The Retail Demo Store features several demo components that showcase different AWS services and capabilities:</p> <ol> <li> <p> Room Makeover: NEW</p> <p>Combines Stable Diffusion, Anthropic Claude, Amazon Sagemaker, Amazon Bedrock, and Amazon Rekognition to generate re-styled rooms from user-uploaded images.</p> </li> <li> <p> Personalized Product Descriptions: NEW</p> <p>Uses Amazon Bedrock and Anthropic's Claude model to generate personalized product descriptions.</p> </li> <li> <p> Personalization:</p> <p>Powered by Amazon Personalize, demonstrating use cases like similar item recommendations, personalized ranking, and user segmentation.</p> <p>Includes workshops on setting up and evaluating Personalize models.</p> </li> <li> <p> Messaging and Engagement:</p> <p>Uses Amazon Pinpoint for triggered email, SMS, and in-app messages (welcome emails, abandoned cart reminders, etc.). (Deprecated)</p> <p>Demonstrates omni-channel personalization by integrating Personalize and Pinpoint.</p> </li> <li> <p> Geofencing and Location-aware Personalization:</p> <p>Uses Amazon Location Services to create geofences and trigger personalized offers/pickup notifications.</p> </li> <li> <p> Search</p> <p>Integrates Amazon OpenSearch Service to power a scalable and customizable search experience for an ecommerce application</p> <p>Enables businesses to deliver a highly engaging and responsive search functionality to their customers</p> </li> </ol> <p>These demos showcase a wide range of AWS services and how they can be integrated to build compelling customer experiences for ecommerce, retail, and digital marketing use cases.</p>"},{"location":"Available%20Demos/GenAI%20Personalized%20Product%20Descriptions/","title":"Personalized Product Descriptions with GenAI","text":""},{"location":"Available%20Demos/GenAI%20Personalized%20Product%20Descriptions/#overview","title":"Overview","text":"<p>Generative AI can be used to automate the creation of marketing content, including generating personalized product descriptions. This can save marketers significant time and effort, allowing them to focus on other aspects of their strategy.</p> <p>The real power of generative AI for product descriptions is the ability to dynamically create unique, personalized content for each customer segment or individual user. Previously, marketers would need to manually generate multiple copies of product descriptions for different customer attributes. Generative AI can automate this process, providing opportunities to tailor the descriptions to each user's preferences and context.</p>"},{"location":"Available%20Demos/GenAI%20Personalized%20Product%20Descriptions/#implementation-in-the-retail-demo-store","title":"Implementation in the Retail Demo Store","text":"<p>The Retail Demo Store integrates the product service with Amazon Bedrock to retrieve personalized product descriptions based on the logged-in user's age and interests.</p> <p>Amazon Bedrock makes Foundation Models (FMs) accessible via an API, and in this demo, Anthropic's Claude 3 Haiku is the underlying FM used for generating the personalized descriptions.</p> <p>The prompt used to generate the personalized descriptions takes the following form:</p> <pre><code>I'd like you to rewrite the following paragraph using the following instructions:\n\"{instructions}\"\n\n\"{original product description}\"\n\nPlease put your rewrite in &lt;p&gt;&lt;/p&gt; tags.\n</code></pre> <p>The instructions used are:</p> <pre><code>Please generate an enhanced product description personalised for a customer aged {age range}, interested in {interests}.\nHowever, do not mention their age in the rewrite. \nThe product is named \"{product name}\" and is a product of type \"{product type}\" in the {product category} category.\n</code></pre> <p>This allows the generative AI model to dynamically create a personalized product description based on the user's age and interests, without explicitly mentioning those details.</p>"},{"location":"Available%20Demos/GenAI%20Personalized%20Product%20Descriptions/#architecture","title":"Architecture","text":"<p>The overall architecture of this demo involves the following components:</p> <ol> <li>The user authenticates with Amazon Cognito and obtains an identity token, which is passed to subsequent API requests.</li> <li>The Web UI uploads a product image to S3 and calls the API Gateway to request a personalized product description.</li> <li>The API Gateway validates the identity token and proxies the request to a Lambda function.</li> <li>The Lambda function retrieves the user's age and interests from the identity token, constructs the prompt, and calls Amazon Bedrock to generate the personalized description.</li> <li>The generated description is returned to the Web UI for display.</li> </ol> <p>By integrating Generative AI through Amazon Bedrock, the Retail Demo Store is able to provide personalized product descriptions that are tailored to each individual user, improving the overall shopping experience.</p>"},{"location":"Available%20Demos/Geofencing%20and%20Location-aware%20Personalization/","title":"Geofencing and Location aware Personalization","text":""},{"location":"Available%20Demos/Geofencing%20and%20Location-aware%20Personalization/#geofencing-and-location-aware-personalization","title":"Geofencing and Location-aware Personalization","text":"<p>The Retail Demo Store integrates Amazon Location Services to demonstrate how businesses can leverage location data to deliver personalized experiences and increase foot traffic to physical stores.</p>"},{"location":"Available%20Demos/Geofencing%20and%20Location-aware%20Personalization/#use-case","title":"Use Case","text":"<p>Imagine a customer is out shopping and approaches one of your retail locations. As they get closer, you want to be able to detect their presence, deliver a personalized offer or notification, and potentially encourage them to come into the store to redeem the offer or pick up an online order.</p> <p></p>"},{"location":"Available%20Demos/Geofencing%20and%20Location-aware%20Personalization/#how-it-works","title":"How it Works","text":"<p>The Retail Demo Store uses Amazon Location Services to set up a geofence around a sample physical store location. As customers approach the store, their location is detected, and personalized messages are delivered to them through Amazon Pinpoint (Deprecated).</p> <p>The key components are:</p> <ol> <li>Location Service: Defines the geofence around the physical store and tracks customer proximity.</li> <li>Offers Service: Maintains a catalog of personalized offers that can be triggered based on customer location.</li> <li>Pinpoint: Sends personalized push notifications, SMS, or email messages to customers when they enter the geofence (Deprecated).</li> <li>Personalize: Integrates with Amazon Personalize to select the most relevant offer for each customer based on their profile and past behaviors.</li> </ol> <p>When a customer enters the geofence, the following happens:</p> <ol> <li>The Location Service detects the customer's proximity to the store.</li> <li>The Offers Service selects a personalized offer for the customer using Amazon Personalize.</li> <li>Pinpoint delivers the personalized offer to the customer via their preferred communication channel (e.g., push notification, SMS, email) (Deprecated)..</li> <li>The customer can then redeem the offer by visiting the store.</li> </ol>"},{"location":"Available%20Demos/Geofencing%20and%20Location-aware%20Personalization/#benefits","title":"Benefits","text":"<ul> <li>Increased Foot Traffic: Personalized offers and notifications encourage customers to visit the physical store.</li> <li>Improved Customer Experience: Customers receive timely, relevant offers based on their location and preferences.</li> <li>Enhanced Omni-Channel Strategy: Integrating location data with other customer data (e.g., purchase history, browsing behavior) enables a more comprehensive, personalized customer experience across digital and physical channels.</li> </ul>"},{"location":"Available%20Demos/Geofencing%20and%20Location-aware%20Personalization/#try-it-yourself","title":"Try it Yourself","text":"<p>To experience the Geofencing and Location-aware Personalization demo, deploy the Retail Demo Store and navigate to the \"In Store View -&gt; Location Geofence\" section. You can then simulate a customer approaching the store and see the personalized offer delivered.</p>"},{"location":"Available%20Demos/Messaging%20and%20Engagement/","title":"Messaging and Engagement","text":"<p>Amazon Pinpoint is no longer accepting new customers beginning May 20, 2025 - and support will be ended effective October 30, 2026.  See https://docs.aws.amazon.com/pinpoint/latest/userguide/migrate.html for more details.  Therefore, all messaging functionality has been disabled until the code and workshops are updated. The Retail Demo Store integrates Amazon Pinpoint and Amazon Personalize to provide a seamless omni-channel personalization experience for the customer.</p>"},{"location":"Available%20Demos/Messaging%20and%20Engagement/#welcome-emails","title":"Welcome Emails","text":"<p>When a new user signs up for a Retail Demo Store account, Amazon Pinpoint is used to automatically send a welcome email. The email content is personalized based on the user's profile information, such as their name, and can include personalized product recommendations generated by Amazon Personalize.</p>"},{"location":"Available%20Demos/Messaging%20and%20Engagement/#abandoned-cart-emails","title":"Abandoned Cart Emails","text":"<p>If a user adds items to their cart but does not complete the purchase, Amazon Pinpoint is used to send an \"abandoned cart\" email. This email includes a coupon code to incentivize the user to return and complete their purchase. The product recommendations in the email are personalized based on the user's browsing and purchase history.</p>"},{"location":"Available%20Demos/Messaging%20and%20Engagement/#sms-alerts-and-offers","title":"SMS Alerts and Offers","text":"<p>The Retail Demo Store also integrates SMS messaging powered by Amazon Pinpoint. Users can opt-in to receive text alerts, such as notifications when they are near a physical store location. These alerts can include personalized product offers generated by Amazon Personalize.</p>"},{"location":"Available%20Demos/Messaging%20and%20Engagement/#omni-channel-personalization","title":"Omni-Channel Personalization","text":"<p>By connecting Amazon Pinpoint with Amazon Personalize, the Retail Demo Store is able to create a unified, omni-channel personalization experience. All customer interactions, whether on the website, in emails, or through SMS, are fed into the Personalize machine learning models. This allows the recommendations and offers to be consistently personalized across every touchpoint.</p>"},{"location":"Available%20Demos/Messaging%20and%20Engagement/#real-time-segmentation","title":"Real-Time Segmentation","text":"<p>Amazon Pinpoint enables the creation of real-time user segments based on the customer's behavior across web, mobile, email, and SMS channels. These dynamic segments can then be used to trigger personalized messaging campaigns through the channel most appropriate for each user.</p> <p>Overall, the Messaging and Engagement demo showcases how retailers can leverage the power of Amazon Pinpoint and Amazon Personalize to deliver a highly personalized, omni-channel customer experience that drives engagement and conversion.</p>"},{"location":"Available%20Demos/Personalization/","title":"Personalization","text":"<p>The Retail Demo Store showcases several personalization capabilities powered by Amazon Personalize, a machine learning service that makes it easy to add sophisticated personalization to applications. The personalization demos in the Retail Demo Store cover the following key use cases:</p>"},{"location":"Available%20Demos/Personalization/#related-items-recommendations","title":"Related Items Recommendations","text":"<p>The product detail pages in the Retail Demo Store include a \"Compare similar items\" carousel that displays products similar to the one being viewed. This is implemented using the Similar-Items algorithm in Amazon Personalize, which recommends related items based on user behavior (co-occurrence in interactions data) and thematic similarity between products.</p> <p>The Similar-Items algorithm considers both how often products appear together in user histories, as well as the attributes of the products themselves, to identify items that are truly similar - even for long-tail or new products with limited historical data.</p> <p>Additionally, the Personalized-Ranking recipe is used to re-order the related items recommendations based on the current user's preferences, providing a personalized experience.</p>"},{"location":"Available%20Demos/Personalization/#recommended-for-you","title":"Recommended for You","text":"<p>The \"Inspired by your shopping trends\" section on the homepage displays personalized product recommendations for the current user, using the User-Personalization recipe in Amazon Personalize. This recipe balances recommending items the user is likely to engage with, based on their historical behavior, with exposing them to new and trending products.</p> <p>The User-Personalization recipe handles the \"cold-start\" challenge, where limited or no historical information is known about a user or an item, by incorporating user attributes and item metadata to make relevant recommendations.</p>"},{"location":"Available%20Demos/Personalization/#user-segmentation","title":"User Segmentation","text":"<p>Amazon Personalize also enables advanced user segmentation, going beyond traditional rules-based approaches. The Item-Affinity and Item-Attribute-Affinity recipes can identify high-propensity user segments for specific products or product categories, without the need to maintain complex business rules.</p> <p>This allows retailers to efficiently target marketing campaigns, promotions, or merchandising strategies to the users most likely to engage.</p>"},{"location":"Available%20Demos/Personalization/#real-time-personalization","title":"Real-Time Personalization","text":"<p>The Retail Demo Store showcases how Amazon Personalize can be integrated with the web user interface to deliver real-time personalized experiences. As users interact with the storefront, their clickstream data is captured and sent to Personalize's real-time event tracking. Personalize then uses this data to update the user's profile and deliver personalized recommendations in subsequent page views.</p>"},{"location":"Available%20Demos/Personalization/#measuring-personalization-impact","title":"Measuring Personalization Impact","text":"<p>The Retail Demo Store also includes workshops that demonstrate how to measure the impact of personalization using techniques like A/B testing, interleaving, and multi-armed bandit experiments. These allow you to rigorously evaluate the effectiveness of your personalization strategies and make data-driven decisions to optimize the customer experience.</p> <p>Overall, the personalization capabilities showcased in the Retail Demo Store illustrate how Amazon Personalize can be easily integrated to deliver sophisticated, scalable personalization for ecommerce applications - without the need for extensive machine learning expertise.</p>"},{"location":"Available%20Demos/Product%20Search/","title":"Product search","text":"<p>The Search demo in the Retail Demo Store showcases how to integrate Amazon OpenSearch Service (formerly Amazon Elasticsearch Service) to provide a powerful and customizable search experience for an ecommerce application.</p> <p>The current demo presents only type-ahead search at the moment, but the principles could be extended to support a fully fledged search solution.</p>"},{"location":"Available%20Demos/Product%20Search/#how-it-works","title":"How it Works","text":"<p>The core components of the Search demo are:</p> <ol> <li> <p>Search Service: This is a RESTful web service that provides an API for querying the product catalog and returning search results. The service is deployed as a Docker container on Amazon ECS.</p> </li> <li> <p>OpenSearch Cluster: Amazon OpenSearch Service is used to host the product index and power the search functionality. When the Retail Demo Store is initially deployed, the product catalog is automatically indexed in OpenSearch.</p> </li> <li> <p>Web UI Integration: The Retail Demo Store's web user interface makes calls to the Search Service API when a user performs a search. The search results are then displayed to the user.</p> </li> </ol> <p>Here's a step-by-step breakdown of how the Search demo works:</p> <ol> <li>User Initiates a Search: A user enters a search query in the Retail Demo Store's web UI.</li> <li>Web UI Calls Search Service: The web UI makes a request to the Search Service API, passing the user's search query.</li> <li>Search Service Queries OpenSearch: The Search Service forwards the query to the OpenSearch cluster and retrieves the relevant product results.</li> <li>Search Service rerank the results: The Search Service send the results to Amazon Personalize to rerank based on the current customer.</li> <li>Web UI Displays Results: The web UI receives the search results and displays them to the user.</li> </ol>"},{"location":"Available%20Demos/Product%20Search/#conclusion","title":"Conclusion","text":"<p>The Search demo in the Retail Demo Store showcases how to leverage Amazon OpenSearch Service to provide a scalable, customizable, and integrated search experience for an ecommerce application. By combining the power of OpenSearch with the overall architecture of the Retail Demo Store, businesses can deliver a highly engaging and responsive search functionality to their customers.</p>"},{"location":"Available%20Demos/Room%20Makeover/","title":"Room Makeover: Revolutionizing Interior Design with GenAI","text":"<p>In today's fast-paced world, consumers are constantly seeking new and innovative ways to personalize their living spaces. The Retail Demo Store's Room Makeover demo harnesses the power of cutting-edge AI technologies to enable an unprecedented level of personalization in interior design.</p>"},{"location":"Available%20Demos/Room%20Makeover/#the-challenge","title":"The Challenge","text":"<p>Traditionally, the process of reimagining a room's d\u00e9cor has been time-consuming and labor-intensive. Homeowners often struggle to visualize how different design elements would look in their existing spaces, leading to hesitation and missed opportunities.</p>"},{"location":"Available%20Demos/Room%20Makeover/#the-solution","title":"The Solution","text":"<p>The Room Makeover demo revolutionizes this experience by seamlessly integrating several AWS services to create a truly immersive and personalized interior design solution.</p> <ol> <li> <p>User Uploads Room Image: Customers can upload a photo of their existing room through a secure and intuitive web interface powered by AWS Amplify and Amazon Cognito.</p> </li> <li> <p>Image Analysis: The uploaded image is then analyzed using Amazon Rekognition, which detects and identifies the key furniture and decor elements within the room.</p> </li> <li> <p>Product Matching: The detected objects are matched against a product catalog using Amazon Bedrock's Titan Multimodal Embeddings model, which provides a rich understanding of product attributes and similarities.</p> </li> <li> <p>Personalized Prompts: Combining the detected room elements with the product matches, the demo generates a personalized prompt that can be used to guide the AI-powered room redesign.</p> </li> <li> <p>Stable Diffusion Generation: The prompt is then passed to a custom Stable Diffusion model deployed on Amazon SageMaker, which generates a new image depicting the room in the selected design style.</p> </li> <li> <p>Continuous Optimization: The generated image is further analyzed to identify additional furniture and decor elements, which are matched back to the product catalog to allow customers to select and purchase straight from the generated room image.</p> </li> </ol>"},{"location":"Available%20Demos/Room%20Makeover/#the-benefits","title":"The Benefits","text":"<p>The Room Makeover demo offers several key benefits for businesses and consumers:</p> <ol> <li> <p>Personalization at Scale: By leveraging the power of AI, the demo can generate personalized room designs for each customer, at scale, rather than relying on manual, labor-intensive processes.</p> </li> <li> <p>Increased Engagement and Conversion: The immersive, AI-powered experience helps customers visualize how their spaces could be transformed. The generated product in the image is automatically linked to the product catalog and features a direct \"add to basket\" functionality, driving increased engagement and ultimately, higher conversion rates. </p> </li> <li> <p>Streamlined Workflows: The automated product matching and prompt generation capabilities reduce the time and effort required by interior design professionals, enabling them to focus on higher-value tasks.</p> </li> </ol>"},{"location":"Available%20Demos/Room%20Makeover/#conclusion","title":"Conclusion","text":"<p>The Room Makeover demo showcases the transformative potential of AI-powered personalization in the interior design industry. By seamlessly integrating cutting-edge AWS services, businesses can now offer their customers a truly innovative and engaging experience, ultimately driving growth and customer satisfaction.</p>"},{"location":"Deployment/Creating-account/","title":"Creating a Retail Demo Store account","text":"<p>Before getting started, we advise you to use a Private Window (Firefox) or Incognito Window (Chrome) to make sure you don't mix different demo profiles in the same browser session</p> <p>Since several of the features of the Retail Demo Store require a user/customer account to demonstrate effectively, this section will describe the process of creating a user account using the Retail Demo Store\u2019s web user interface. This process also provides a good demonstration of how Amazon Cognito is used to implement user account and authentication.</p> <p>Click the \u201cSign In\u201d button in the right side of the top navigation bar. This will take you to the Sign In page. Click the \u201cCreate account\u201d link at the bottom of the Sign In form as shown below. These forms are provided by Cognito.</p> <p></p> <p>Figure 3. Create Account Link.</p> <p>Complete the \u201cSign Up Account\u201d form by entering appropriate values in each field. Note that your password must meet the complexity requirements configured in Amazon Cognito (upper- and lower-cased characters, numbers, and special characters). In addition, be sure to enter a valid email address since Cognito will send you a confirmation code via email once you submit the form. Otherwise, the only way to confirm your account is manually in the Cognito User Pool page in the AWS console. If you need to create multiple accounts to demonstrate behavior across users, a useful tip is to append a different mailbox name (\u201c+\u201d notation) to the username portion of your email address for each user account. For example, login+user5@example.com. You will still receive emails addressed using this format in your inbox.</p> <p></p> <p>Figure 4. Create Account page.</p> <p>Within a few seconds after pressing the \u201cCreate Account\u201d button on the \u201cSign Up Account\u201d form you should receive an email on the provided email address. The email will contain a 6-digit confirmation code. Enter this code on the \u201cConfirm Sign Up\u201d form and press the \u201cConfirm\u201d button. If you don\u2019t receive a confirmation code, you can have it resent or you can manually confirm your user account in the Amazon Cognito User Pool page in the AWS console in the AWS account where the Retail Demo Store instance has been deployed.</p> <p></p> <p>Figure 5. Confirm New Account.</p> <p>Once your user account has been confirmed, you can sign in to your account with your username and password.</p> <p></p> <p>Figure 6. Sign In to Account.</p> <p>You can tell if you\u2019re signed in if the \u201cSign In\u201d button in the top navigation is replaced by your username.</p>"},{"location":"Deployment/getting-started/","title":"Deployment Instructions","text":"<p>These instructions are valid whenever you just want to demo the Retail Demo Store or if you would like to contribute enhancements or features to the Retail Demo Store, please read on for instructions on how to develop and test your changes. </p> <p>Thanks for considering working with this project.</p> <pre><code>graph TB\n  B[Install the requirements];\n  B --&gt;|if you want to customize the demo| C[Fork this Repo];\n  C --&gt; D[Create a Github Personal Access Token]\n  B --&gt; E;\n  D --&gt; E[Create a Staging Bucket];\n  E --&gt; F[Stage the code to this bucket];\n  F --&gt; G[Deploy Cloudformation Template]</code></pre>"},{"location":"Deployment/getting-started/#step-1-requirements","title":"Step 1 : Requirements","text":"<p>Let's review the requirements before deploying the demo store (this was tested on a fresh EC2 instance for the Retail Demo Store. These install prerequisites apply to the Ubuntu AMI.)</p>"},{"location":"Deployment/getting-started/#ensure-the-instance-is-up-to-date","title":"Ensure the instance is up-to-date:","text":"<pre><code>sudo apt update\nsudo apt upgrade\n</code></pre>"},{"location":"Deployment/getting-started/#verify-python","title":"Verify Python:","text":"<p><pre><code>python3 -V\n</code></pre> You need Python 3.12.3 or higher If not: <code>sudo apt install python3</code></p>"},{"location":"Deployment/getting-started/#install-git-and-clone-repo","title":"Install Git and clone repo:","text":"<pre><code>sudo apt install git\nmkdir RetailDemoStore\ncd RetailDemoStore/\ngit clone https://github.com/aws-samples/retail-demo-store\n</code></pre> <p>Note</p> <p>If you plan to customize the demo, we recommend using your fork instead of the aws-samples one (see fork this repo)</p>"},{"location":"Deployment/getting-started/#packages-required-for-building-staging","title":"Packages required for building staging:","text":"<pre><code>sudo apt install zip\nsudo apt install python3-pip\nsudo apt install python3.12-venv\nsudo apt install nodejs\nsudo apt install npm\n</code></pre>"},{"location":"Deployment/getting-started/#install-and-configure-the-aws-cli","title":"Install and configure the AWS CLI:","text":"<pre><code>curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"\nunzip awscliv2.zip\nsudo ./aws/install\naws configure\n</code></pre>"},{"location":"Deployment/getting-started/#optional-fork-this-repo","title":"(optional) Fork this Repo","text":"<p>We recommend to create a fork of the Retail Demo Store respository in your own GitHub account. That enables you to customize the code before deployment.</p>"},{"location":"Deployment/getting-started/#optional-create-a-github-personal-access-token","title":"(optional) Create a GitHub Personal Access Token","text":"<p>Create a GitHub Personal Access Token in your GitHub account.</p> <p>Make sure that your token has the \"repo\", \"repo:status\", and \"admin:repo_hook\" permission scopes.</p> <p>Save your access token in a secure location, you will use it the CloudFormation parameters at deployment time.</p>"},{"location":"Deployment/getting-started/#step-2-create-a-s3-staging-bucket","title":"Step 2: Create a S3 Staging Bucket","text":"<p>Create a dedicated S3 bucket specifically for staging/deployment.</p> <p>Warning</p> <p>Ensure that versioning is enabled for this bucket.</p> <p>Warning</p> <p>Your staging bucket must be in the region with in which you plan to deploy the Retail Demo Store.</p>"},{"location":"Deployment/getting-started/#enabling-event-notifications","title":"Enabling Event Notifications","text":"<p>Setting Up Event Notifications to Amazon EventBridge on an S3 Bucket</p> <p>Follow these steps to configure your S3 bucket to send event notifications to Amazon EventBridge:</p> <ol> <li>Navigate to your S3 bucket in the AWS Management Console. </li> <li>Click on the Properties tab.</li> <li>Scroll down to the Amazon EventBridge section. </li> <li>Click the Edit button. </li> <li>Toggle the option Send notifications to Amazon EventBridge for all events in this bucket to On. </li> <li>Click Save changes.</li> </ol>"},{"location":"Deployment/getting-started/#bucket-permissions","title":"Bucket Permissions","text":"<p>The default stage script requires the ability to set the resources it uploads to your bucket as public read.  Note that you do not need to set the bucket up to allow public listing of the resources in the bucket (this is not recommended).</p> <p>If you plan to enable the automated Personalize campaign creation process at deployment time, you must allow access for Amazon Personalize to your bucket. Add the following bucket policy to your staging bucket.</p> <pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Id\": \"PersonalizeS3BucketAccessPolicy\",\n    \"Statement\": [\n        {\n            \"Sid\": \"PersonalizeS3BucketAccessPolicy\",\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"Service\": \"personalize.amazonaws.com\"\n            },\n            \"Action\": [\n                \"s3:GetObject\",\n                \"s3:ListBucket\"\n            ],\n            \"Resource\": [\n                \"arn:aws:s3:::&lt;your bucket name&gt;\",\n                \"arn:aws:s3:::&lt;your bucket name&gt;/*\"\n            ]\n        }\n    ]\n}\n</code></pre>"},{"location":"Deployment/getting-started/#step-3-staging-for-deployment","title":"Step 3: Staging for Deployment","text":"<p>We recommend to use a Python 3 virtual environment. Current supported version of python is 3.12 (other versions may work but we haven't tested all versions)</p> <pre><code>python3.12 -m venv .venv/\nsource .venv/bin/activate\n</code></pre> <p>The <code>stage.sh</code> script at the root of the repository must be used to upload the deployment resources to your staging S3 bucket if you use this option. The shell uses the local AWS credentials to build and push resources to your custom bucket. </p> <p>Example on how to stage your project to a custom bucket and path (note the path is optional but, if specified, must end with '/'):</p> <pre><code>./stage.sh MY_CUSTOM_BUCKET S3_PATH/ --skip-virtualenv\n</code></pre>"},{"location":"Deployment/getting-started/#step-4-deploy-the-cloudformation-template","title":"Step 4: Deploy the Cloudformation template","text":"<p>The stage script will output a path to your master deployment CloudFormation template.  You can use this link to your S3 bucket to start a new deployment via the CloudFormation console in your AWS Console. Please read and complete any required parameters. The mandatory parameters to fill up are:</p> <ul> <li>ResourceBucket</li> <li>ResourceBucketRelativePath</li> <li>CreateOpenSearchServiceLinkedRole</li> </ul> <p>All the others will work by default, take the time to read and decide which parameters you want to use</p> <p>Note</p> <p>You can also use the command line below.  (replace REGION, MY_CUSTOM_BUCKET and S3_PATH value). This script deploys the retail demo store with standard options, you cannot change any parameters directly</p> <pre><code>./scripts/deploy-cloudformation-stacks.sh DEPLOYMENT_S3_BUCKET S3_PATH REGION STACK_NAME\n</code></pre>"},{"location":"Deployment/integrations%20tests/","title":"Integrations tests","text":"<p>Integration tests can be run on either</p> <ol> <li>Local development (via Docker Compose)</li> <li>Actual (deployed) AWS environment</li> </ol>"},{"location":"Deployment/integrations%20tests/#running-integration-tests-with-gnu-make","title":"Running integration tests with GNU Make","text":""},{"location":"Deployment/integrations%20tests/#getting-started","title":"Getting started","text":"<p>The Makefile in this folder allows tests to be ran in bulk (or by service/function) without any additional setup.</p> <p>Run commands in this directory (<code>src/run-tests</code>)</p> <p>Example usage:</p> <pre><code># Run this only once to generate `.venv` folder with all dependencies in all `integ` folders\nmake setup \n\n# Run integation tests of all services\nmake integ\n\n# Run integration test of a specific service (default to running against local Docker container)\nmake integ SERVICE=recommendations\n\n# Run integration test of a specific on a target endpoint\nmake integ SERVICE=recommendations RECOMMENDATIONS_API_URL=http://retai-LoadB-xxx-yyy.us-west-2.elb.amazonaws.com\n</code></pre>"},{"location":"Deployment/integrations%20tests/#list-of-environment-variables-used-in-the-integration-tests","title":"List of environment variables used in the integration tests","text":"<p>You can find the list in <code>&lt;root_project_folder&gt;/.env.template</code>. All of them have default values and should work out of the box.</p> <p>The important variables are the <code>&lt;SERVICE&gt;_API_URL</code>. They are used to redirect the tests to run against different URLs.</p> <p>NB: For local development you may need to set up dependencies like local dynamodb before testing. Refer to individual service test READMEs for more detailed info on local dependencies</p>"},{"location":"Deployment/integrations%20tests/#targets","title":"Targets","text":""},{"location":"Deployment/integrations%20tests/#make","title":"<code>make</code>","text":"<p>Runs default target (<code>test</code>).</p>"},{"location":"Deployment/integrations%20tests/#make-test","title":"<code>make test</code>","text":"<p>Run all tests of all types. Currently, only integration tests are supported.</p>"},{"location":"Deployment/integrations%20tests/#make-setup","title":"<code>make setup</code>","text":"<p>Installs test requirements inside a virtual environment <code>.venv</code>.</p>"},{"location":"Deployment/integrations%20tests/#make-venv","title":"<code>make venv</code>","text":"<p>Create virtual environment.</p>"},{"location":"Deployment/integrations%20tests/#make-integ-service","title":"<code>make integ SERVICE=</code>","text":"<p>Depends on <code>setup</code> target. Run all integration tests. (Optional: Specify SERVICE parameter to run tests for that service only).</p>"},{"location":"Deployment/integrations%20tests/#make-clean","title":"<code>make clean</code>","text":"<p>Remove virtual environment.</p>"},{"location":"Deployment/troubleshooting/","title":"Troubleshoot","text":""},{"location":"Deployment/troubleshooting/#known-issueslimitations","title":"Known Issues/Limitations","text":"<ul> <li>The application was written for demonstration and education purposes and not for production use.</li> <li>You currently cannot deploy this project multiple times in the same AWS account and the same AWS region. However, you can deploy the project into separate supported regions within the same AWS account.</li> <li>Make sure your CloudFormation stack name uses all lowercase letters.</li> <li>Currently only tested in the AWS regions provided in the deployment instructions above. The only limitation for deploying into other regions is availability of all required services.<ul> <li>Amazon IVS is currently only supported in the N. Virginia (us-east-1), Oregon (us-west-2), and Ireland (eu-west-1) regions. Therefore, to deploy the Retail Demo Store in a region that does not support IVS, be sure to select to use the Default IVS Streams CloudFormation template parameter.</li> </ul> </li> </ul>"},{"location":"Deployment/troubleshooting/#troubleshooting-faqs","title":"Troubleshooting / FAQs","text":"<p>Q: When accessing the Retail Demo Store web application after deploying the project, a CloudFront error is displayed. What's wrong?</p> <p>A: Sign in to the AWS account/region where the project was deployed and browse to CodePipeline. Verify that the pipeline with \"WebUIPipeline\" in the name has successfully been built. If it failed, inspect the details of the Build stage to diagnose the root cause.</p> <p>Q: When accessing the Retail Demo Store web application after deploying the project, the home page shows spinning icons and products are never loaded. What's wrong?</p> <p>A: The most likely cause is an error building or deploying one or more of the microservices. Sign in to the AWS account/region where the project was deployed and browse to CodePipeline. Verify that all of the Retail Demo Store pipelines have completed successfully. Inspect the details for any that have failed to determine the root cause. Sometimes just manually triggering a build/deploy will resolve the issue.</p> <p>Q: This project is expensive to run (or keep running). How can I reduce the running cost of a deployment?</p> <p>A: The most costly service in the project for an idle deployment is Amazon Personalize. You can eliminate Personalize idle costs by stopping all Amazon Personalize recommenders and deleting all campaigns in the Retail Demo Store dataset group for Personalize. This just shuts down the real-time inference endpoints; the datasets and ML models will remain. You should also change all of the recommender and campaign ARN parameter values in the AWS Systems Manager Parameter Store to <code>NONE</code>, leaving the parameter values for filters and the event tracker alone. These parameter names start with <code>/retaildemostore/personalize/</code> (e.g., <code>/retaildemostore/personalize/recommended-for-you-arn</code>). Once you complete these steps, the storefront will fall back to default behavior for recommending products from the catalog. To reactive Personalize, start the recommenders and create campaigns and then set the recommender and/or campaign ARNs back in the Systems Manager Parameter Store. The storefront will automatically start showing recommendations from Personalize again.</p>"},{"location":"Deployment/troubleshooting/#reporting-bugs","title":"Reporting Bugs","text":"<p>If you encounter a bug, please create a new issue with as much detail as possible and steps for reproducing the bug. See the Contributing Guidelines for more details.</p>"},{"location":"Deployment/local-development/0-local-development-instructions/","title":"Local Development Instructions","text":"<p>The Retail Demo Store's web services such as users, carts, orders, products, and others can be run locally on your development system using Docker Compose. You can choose to run them all locally or just one or two locally and the rest running in your AWS account. For example, suppose you're working on an enhancement or fix in the products service. You can run just that service locally to test your changes while all of the other services are running in your AWS account. If your changes require UI testing, you can run the web-ui in a local container as well configured to connect to your local product service instance while still having both of them connect to the other services running in your AWS account.</p> <p>Before you can run the Retail Demo Store web services locally, you must first deploy the Retail Demo Store project to your AWS account and then clone this repository to your local machine. The instructions below provide additional details on configuration and how to setup the services to run locally. The docker-compose.yml file includes the configuration used by Docker Compose. Note that there are some dependencies between services which are noted.</p>"},{"location":"Deployment/local-development/0-local-development-instructions/#configuring-your-environment","title":"Configuring your Environment","text":"<p>Besides cloning this repository to your local system, you also need to have the AWS CLI installed and configured locally.</p> <p>Docker Compose will load the <code>.env</code> file to resolve environment variables referenced in the docker-compose.yml file. You can copy the .env.template file to .env as a starting point. This is where you can customize variables to match your desired configuration.</p> <p>You can find the common environment variables from your deployed stack in the CloudFormation output name <code>ExportEnvVarScript</code>. Use this CLI to get the output in a proper format.</p> <pre><code>aws cloudformation describe-stacks --stack-name retaildemostore \\\n  --region REGION \\\n  --query \"Stacks[0].Outputs[?OutputKey=='ExportEnvVarScript'].OutputValue\" \\\n  --output text\n</code></pre> <p>Then you can copy and override variables for each service in your .env file.</p>"},{"location":"Deployment/local-development/0-local-development-instructions/#amazon-ecr-authorization","title":"Amazon ECR authorization","text":"<p>Since some of the Docker images are hosted in Amazon ECR, you must authenticate your shell session before running docker-compose. Otherwise, the images will not be able to be downloaded. Run the following command to authenticate before running docker-compose. You should only have to do this once per shell session.</p> <pre><code>aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws\n</code></pre>"},{"location":"Deployment/local-development/0-local-development-instructions/#aws-credentials","title":"AWS credentials","text":"<p>Docker compose will pick variables set in your shell when building and launching the services. Make sure you set the correct environement variables in your shell before doing the docker compose up command. You can find more information about all the different ways of setting aws credentials in this documentation</p> <pre><code>export AWS_ACCESS_KEY_ID=xxx\nexport AWS_SECRET_ACCESS_KEY=xxx\nexport AWS_SESSION_TOKEN=xxx\n</code></pre>"},{"location":"Deployment/local-development/0-local-development-instructions/#run-all-services","title":"Run All Services","text":"<p>The following command will build and launch all Retail Demo Store web services in your local Docker engine.</p> <pre><code>docker compose up --build\n</code></pre>"},{"location":"Deployment/local-development/0-local-development-instructions/#run-specific-services","title":"Run Specific Services","text":"<p>You can also choose to run specific services locally by appending the service names to the above command. For example, the following command builds and launches the products and web-ui services only. Note that some configuration of the web-ui environment will likely be needed to match your configuration.</p> <pre><code>docker compose up --build products web-ui\n</code></pre> <p>For instructions specific to each Retail Demo Store web service, view the README page in each service sub-directory.</p>"},{"location":"Deployment/local-development/0-local-development-instructions/#web-ui-service","title":"Web UI Service","text":"<p>When deployed to AWS, the Web UI is hosted in an S3 bucket and served by CloudFront. For local development, you can deploy the Web UI in a Docker container. Since the Web UI makes REST API calls to all of the other services, you can configure the <code>web-ui/.env</code> file for which there is an example at <code>web-ui/.env.template</code> to point to services running either locally or deployed on AWS or a combination. Just update the appropiate environment variables to match your desired configuration.</p> <p>Note</p> <p>If you are going to work on frontend updates, instead of using docker you can run: <pre><code>npm install\nnpm run dev\n</code></pre> Which makes frontend development easier</p>"},{"location":"Deployment/local-development/0-local-development-instructions/#swagger-ui","title":"Swagger UI","text":"<p>There is a <code>swagger-ui</code> service in the <code>docker-compose.yml</code>. You can access it via localhost:8081. From there, you can select which service you want to check and send request against the service via Swagger UI.</p> <p>The <code>Dockerfile</code> of <code>swagger-ui</code> copies OpenAPI spec from each service (located at <code>&lt;serviceName&gt;/openapi/spec.yaml</code>). If you add a new service, please ensure that you write the OpenAPI spec and update the <code>Dockerfile</code> to copy yours.</p>"},{"location":"Deployment/services/alexa/","title":"Alexa Skill for C-Store Demo","text":"<p>For more details, including how to deploy, see <code>workshops/5-Conversational/5.2-AlexaHandsfree.md</code>.</p>"},{"location":"Deployment/services/carts/","title":"Carts Service","text":"<p>The Carts web service provides a RESTful API for adding, changing, and deleting shopping carts. The Web UI makes calls to this service as a user adds and removes items from their cart and during checkout.</p> <p>When deployed to AWS, CodePipeline is used to build and deploy the Carts service as a Docker container to Amazon ECS behind an Application Load Balancer. The Carts service can also be run locally in a Docker container. This makes it easier to iterate on and test changes locally before commiting.</p>"},{"location":"Deployment/services/carts/#local-development","title":"Local Development","text":"<pre><code>foo@bar:~$ docker compose up --build -d carts\n</code></pre> <p>Once the container is up and running, you can access it in your browser or with a utility such as Postman at http://localhost:8003.</p>"},{"location":"Deployment/services/carts/#testing","title":"Testing","text":"<p>To run integration tests for the carts service a Python virtual environment and local dynamodb is required. You must have Python 3.8+ installed on your system to run the commands below. The commands are written to be ran from the test directory of the carts service (<code>src/carts/test</code>).</p>"},{"location":"Deployment/services/carts/#run-tests","title":"Run Tests","text":"<p>To run integration tests for the carts service a Python virtual environment is required. You must have Python 3.8+ installed on your system to run the commands below. The commands are written to be ran from the test directory of the carts service (<code>src/carts/test</code>).</p> <p>The following command will create a virtual environment.  <pre><code>python3 -m venv .venv\n</code></pre></p> <p>Some environment variables are required to run the tests and need to be added to the virtual environment. The example below will work for local development. Change as required depending on environment. <pre><code>echo '\nexport CARTS_API_URL=\"http://localhost:8003\"\nexport TEST_USERNAME=\"user1344\"'&gt;&gt; .venv/bin/activate\n</code></pre></p> <p>To activate and enter the virtual environment. <pre><code>source .venv/bin/activate\n</code></pre></p> <p>To install requirements for the integration tests. <pre><code>pip install -r integ/requirements.txt\n</code></pre></p> <p>To run the tests. <pre><code>pytest integ/test_carts.py\n</code></pre></p> <p>You can exit the virtual environment with <code>deactivate</code>.</p> <p>If you want to edit the request bodies for any of the <code>PUT</code> or <code>POST</code> request tests you can do so in <code>json_request_bodies.json</code></p>"},{"location":"Deployment/services/location/","title":"Location Service","text":"<p>The location web service provides an API for retrieving store locations and  customer routes to support to Location Services demo in the Retail Demo Store. To use the demo, see \"Retail Geofencing and Location-aware Personalization\" in the in-app Demo Guide.  </p> <p>This service has two APIs. Check Swagger UI for the API details.</p>"},{"location":"Deployment/services/location/#local-development","title":"Local Development","text":"<p>The location service can be built and run locally (in Docker) using Docker Compose. See the local development instructions for details. From the <code>../src</code> directory, run the following command to build and deploy the service locally.</p> <pre><code>foo@bar:~$ docker compose up --build location\n</code></pre> <p>Once the container is up and running, you can access it in your browser or with a utility such as Postman at http://localhost:8008.</p>"},{"location":"Deployment/services/offers/","title":"Offers Service","text":"<p>The Offers web service provides a RESTful API for retrieving coupons. </p> <p>To see this used, see \"Retail Geofencing and Location-aware Personalization\" in the in-app Demo Guide. </p> <p>When deployed to AWS, CodePipeline is used to build and deploy the Offers service as a Docker container to Amazon ECS behind an Application Load Balancer. The Offers service can also be run locally in a Docker container. This makes it easier to iterate on and test changes locally before commiting.</p>"},{"location":"Deployment/services/offers/#local-development","title":"Local Development","text":"<p>The Offers service can be built and run locally (in Docker) using Docker Compose. See the local development instructions for details. From the <code>../src</code> directory, run the following command to build and deploy the service locally.</p> <pre><code>foo@bar:~$ docker compose up --build offers\n</code></pre> <p>Once the container is up and running, you can access it in your browser or with a utility such as Postman at http://localhost:8008.</p>"},{"location":"Deployment/services/orders/","title":"Orders Service","text":"<p>The Orders web service provides a RESTful API for creating and retrieving orders. The Web UI makes calls to this service when a user goes through the checkout process or when viewing their orders.</p> <p>When deployed to AWS, CodePipeline is used to build and deploy the Orders service as a Docker container to Amazon ECS behind an Application Load Balancer. The Orders service can also be run locally in a Docker container. This makes it easier to iterate on and test changes locally before commiting.</p>"},{"location":"Deployment/services/orders/#local-development","title":"Local Development","text":"<p>The Orders service can be built and run locally (in Docker) using Docker Compose. See the local development instructions for details. From the <code>../src</code> directory, run the following command to build and deploy the service locally.</p> <pre><code>foo@bar:~$ docker-compose up --build orders\n</code></pre> <p>Once the container is up and running, you can access it in your browser or with a utility such as Postman at http://localhost:8004.</p>"},{"location":"Deployment/services/orders/#testing","title":"Testing","text":"<p>To run integration tests for the Orders service a Python virtual environment is required. You must have Python 3.8+ installed on your system to run the commands below. The commands are written to be ran from the test directory of the orders service (<code>src/orders/test</code>).</p> <p>The following command will create a virtual environment.  <pre><code>python3 -m venv .venv\n</code></pre></p> <p>Some environment variables are required to run the tests and need to be added to the virtual environment. The example below will work for local development. Change as required depending on environment. <pre><code>echo '\nexport ORDERS_API_URL=\"http://localhost:8004\"\nexport TEST_ORDER_ID=\"1\"\nexport TEST_USERNAME=\"user1344\"' &gt;&gt; .venv/bin/activate\n</code></pre></p> <p>To activate and enter the virtual environment. <pre><code>source .venv/bin/activate\n</code></pre></p> <p>To install requirements for the integration tests. <pre><code>pip install -r integ/requirements.txt\n</code></pre></p> <p>To run the tests. <pre><code>pytest integ/test-orders.py\n</code></pre></p> <p>You can exit the virtual environment with <code>deactivate</code>.</p> <p>If you want to edit the request bodies for any of the <code>PUT</code> or <code>POST</code> request tests you can do so in <code>json_request_bodies.json</code></p>"},{"location":"Deployment/services/products/","title":"Products Service","text":"<p>The Products web service provides a RESTful API for retrieving product information. The Web UI makes calls to this service when a user is viewing products and categories and the Personalize workshop connects to this service to retrieve product information for building the items dataset.</p> <p>When deployed to AWS, CodePipeline is used to build and deploy the Products service as a Docker container in Amazon ECS behind an Application Load Balancer. The Products service can also be run locally in a Docker container. This makes it easier to iterate on and test changes locally before commiting.</p>"},{"location":"Deployment/services/products/#local-development","title":"Local Development","text":"<p>The Products service can be built and run locally (in Docker) using Docker Compose. See the local development instructions for details. Since the Products service has a dependency on DynamoDB as its datastore, you can either connect to DynamoDB in your AWS account or run DynamoDB locally (default). The docker-compose.yml and template <code>.env</code> (.env.template) is already setup to run DynamoDB locally in Docker. If you want to connect to the real DynamoDB instead, you will need to configure your AWS credentials and comment the <code>DDB_ENDPOINT_OVERRIDE</code> environment variable since it is checked first. From the <code>../src</code> directory, run the following command to build and deploy the service locally.</p> <pre><code>foo@bar:~$ docker compose up --build products\n</code></pre> <p>Once the container is up and running, you can access it in your browser or with a utility such as Postman at http://localhost:8001.</p> <p>Alternatively, you can run the Products service directly, although you will need to setup the required environment variables (See the .env.template file mentioned above) and setup DynamoDB locally or through your AWS account.</p> <p>From the (<code>src/products/src</code>) directory setup a virtual env: <pre><code>python3 -m venv .venv\n</code></pre> To activate and enter the virtual environment. <pre><code>source .venv/bin/activate\n</code></pre> Install the service dependencies: <pre><code>pip install -r requirements.txt\n</code></pre> Set the required Environment variables.  For development, you can set the <code>FLASK_CONFIG</code> env variable to <code>Development</code> <pre><code>export FLASK_CONFIG=Development\n</code></pre> To run the service you can either type:  <pre><code>flask run\n</code></pre> or <pre><code>python3 wsgi.py\n</code></pre> The Products service listens on port <code>8001</code>, you can change this by setting the <code>FLASK_RUN_PORT</code> environment variable, e.g: <pre><code>set FLASK_RUN_PORT=xxxx\n</code></pre></p>"},{"location":"Deployment/services/products/#initializing-the-database","title":"Initializing the Database","text":"<p>The DynamoDB tables can be created and loaded with sample data by calling the init endpoint: <pre><code>POST http://localhost:8001/init\n</code></pre></p>"},{"location":"Deployment/services/products/#products-api","title":"Products API","text":"<p>The following entrypoints are supported by the Products service</p>"},{"location":"Deployment/services/products/#get","title":"GET /","text":"<p>Displays the service welcome page.</p>"},{"location":"Deployment/services/products/#get-productsall","title":"GET /products/all","text":"<p>Returns details on all products.</p>"},{"location":"Deployment/services/products/#get-productsidproductids","title":"GET /products/id/{productIDs}","text":"<p>Returns details on the product(s) identified by <code>{productIDs}</code>. Multiple product IDs can be specified by separating each product ID by a comma. If a single product ID is specified, a single product will be returned. Otherwise, if multiple product IDs are specified, an array of products will be returned.</p>"},{"location":"Deployment/services/products/#get-productsfeatured","title":"GET /products/featured","text":"<p>Returns details on all featured products. Featured products are those with featured attribute equal to true.</p>"},{"location":"Deployment/services/products/#get-productscategorycategoryname","title":"GET /products/category/{categoryName}","text":"<p>Returns details on all products within the category with the name <code>{categoryName}</code>.</p>"},{"location":"Deployment/services/products/#put-productsidproductid","title":"PUT /products/id/{productID}","text":"<p>Updates the product identified by <code>{productID}</code>.</p>"},{"location":"Deployment/services/products/#delete-productsidproductid","title":"DELETE /products/id/{productID}","text":"<p>Deletes the product identified by <code>{productID}</code>.</p>"},{"location":"Deployment/services/products/#post-products","title":"POST /products","text":"<p>Creates a new product.</p>"},{"location":"Deployment/services/products/#put-productsidproductidinventory","title":"PUT /products/id/{productID}/inventory","text":"<p>Updates the current inventory value for the product identified by <code>{productID}</code>.</p>"},{"location":"Deployment/services/products/#get-categoriesall","title":"GET /categories/all","text":"<p>Returns details on all categories.</p>"},{"location":"Deployment/services/products/#get-categoriesidcategoryid","title":"GET /categories/id/{categoryID}","text":"<p>Returns details on the category identified by <code>{categoryID}</code>.</p>"},{"location":"Deployment/services/products/#testing","title":"Testing","text":"<p>To run integration tests for the Products service a Python virtual environment is required. You must have Python 3.8+ installed on your system to run the commands below. The commands are written to be ran from the test directory of the products service (<code>src/products/test</code>).</p> <p>The following command will create a virtual environment.  <pre><code>python3 -m venv .venv\n</code></pre></p> <p>Some environment variables are required to run the tests and need to be added to the virtual environment. The example below will work for local development. Change as required depending on environment. <pre><code>echo '\nexport PRODUCTS_API_URL=\"http://localhost:8001\"\nexport TEST_PRODUCT_ID=\"8bffb5fb-624f-48a8-a99f-b8e9c64bbe29\"\nexport TEST_CATEGORY_NAME=\"tools\"\nexport TEST_CATEGORY_ID=\"16\"' &gt;&gt; .venv/bin/activate\n</code></pre></p> <p>To activate and enter the virtual environment. <pre><code>source .venv/bin/activate\n</code></pre></p> <p>To install requirements for the integration tests. <pre><code>pip install -r integ/requirements.txt\n</code></pre></p> <p>To run the tests. <pre><code>pytest integ/test-products.py\n</code></pre></p> <p>You can exit the virtual environment with <code>deactivate</code>.</p> <p>If you want to edit the request bodies for any of the <code>PUT</code> or <code>POST</code> request tests you can do so in <code>json_request_bodies.json</code></p>"},{"location":"Deployment/services/recommendations/","title":"Recommendations Service","text":"<p>The Recommendations web service provides a RESTful API for retrieving personalized product recommendations,  related products, product reranking, and suggested discounts (powered by Amazon Personalize).   The Web UI makes calls to this service when a user is viewing the home view (recommended products), product detail view (related products), or the category view (personalized ranking of products). If Amazon Personalize campaigns have been created for these use-cases (either by the deployment Lambda option or by stepping through the Personalization workshop), then those campaigns will be called by the Recommendations service. Otherwise, the service will call the Products service to provide a suitable default behavior such as displaying featured products or products from the same category as the displayed product.</p> <p>This service also provides support for running experiments for personalization approaches using techniques such as A/B testing, interleaving results testing, and multi-armed bandit testing. The Experimentation workshops are designed to walk you through how to setup, run, and evaluate experiments.</p> <p>When deployed to AWS, CodePipeline is used to build and deploy the Recommendations service as a Docker container to Amazon ECS behind an Application Load Balancer. The Recommendations service can also be run locally in a Docker container. This makes it easier to iterate on and test changes locally before commiting.</p>"},{"location":"Deployment/services/recommendations/#local-development","title":"Local Development","text":"<p>The Recommendations service can be built and run locally (in Docker) using Docker Compose. See the local development instructions for details. From the <code>../src</code> directory, run the following command to build and deploy the service locally.</p> <pre><code>foo@bar:~$ docker compose up --build recommendations\n</code></pre> <p>Once the container is up and running, you can access it in your browser or with a utility such as Postman at http://localhost:8005.</p>"},{"location":"Deployment/services/search/","title":"Search Service","text":"<p>The Search web service provides a RESTful API for retrieving product information based on a search term. The Web UI makes calls to this service when a user performs a search. Internally, this service makes calls to an OpenSearch cluster for search results. When deployed on AWS, Amazon OpenSearch Service is used. When deployed locally, a local OpenSearch node is used for searches.</p> <p>When the Search service and Amazon OpenSearch are initially deployed to your AWS account, product information is not present in an index and therefore searches from the Web UI will not return results. There are two options for indexing products in OpenSearch when deploying to AWS. First, when deploying the Retail Demo Store project, the CloudFormation template has an option to index the product catalog in OpenSearch as part of the deployment process. The second option is to step through the Search workshop.</p> <p>When deployed to AWS, CodePipeline is used to build and deploy the Search service as a Docker container to Amazon ECS behind an Application Load Balancer. The Search service can also be run locally in a Docker container. This makes it easier to iterate on and test changes locally before commiting.</p>"},{"location":"Deployment/services/search/#local-development","title":"Local Development","text":"<p>The Search service can be built and run locally (in Docker) using Docker Compose. See the local development instructions for details. From the <code>../src</code> directory, run the following command to build and deploy OpenSearch and the Search service locally.</p> <pre><code>foo@bar:~$ docker compose up --build opensearch search\n</code></pre> <p>Once the container is up and running, you can access it in your browser or with a utility such as Postman at http://localhost:8006.</p>"},{"location":"Deployment/services/search/#indexing-products-locally","title":"Indexing Products Locally","text":"<p>As explained above, when the Search service and OpenSearch are deployed, the product information does not exist in an OpenSearch index. When deploying locally, you can use the local_index_products.py script after starting the <code>opensearch</code> Docker container to create and load the products index.</p>"},{"location":"Deployment/services/users/","title":"Users Service","text":"<p>The Users web service provides a RESTful API for creating, updating, and retrieving users. The Web UI makes calls to this service when a user signs up or updates their profile.</p> <p>When deployed to AWS, CodePipeline is used to build and deploy the Users service as a Docker container to Amazon ECS behind an Application Load Balancer. The Users service can also be run locally in a Docker container. This makes it easier to iterate on and test changes locally before commiting.</p>"},{"location":"Deployment/services/users/#user-test-data","title":"User Test Data","text":"<p>The Users service comes preloaded with 5,000 fake user profiles. The generate_users_json.py script was used to create these profiles. The resulting profiles data file is bundled with the Retail Demo Store deployment. Therefore, you should not need to run the generate users script under normal conditions.</p> <p>The reason why so many profiles are preloaded is to support the sample sizes needed to simulate experiements in the Experimentation workshops.</p>"},{"location":"Deployment/services/users/#local-development","title":"Local Development","text":"<p>The Users service can be built and run locally (in Docker) using Docker Compose. See the local development instructions for details. From the <code>../src</code> directory, run the following command to build and deploy the service locally.</p> <pre><code>foo@bar:~$ docker compose up --build users\n</code></pre> <p>Once the container is up and running, you can access it in your browser or with a utility such as Postman at http://localhost:8002.</p>"},{"location":"Deployment/services/users/#testing","title":"Testing","text":"<p>To run integration tests for the Users service a Python virtual environment is required. You must have Python 3.8+ installed on your system to run the commands below. The commands are written to be ran from the test directory of the Users service (<code>src/users/test</code>).</p> <p>The following command will create a virtual environment.  <pre><code>python3 -m venv .venv\n</code></pre></p> <p>Some environment variables are required to run the tests and need to be added to the virtual environment. The example below will work for local development. Change as required depending on environment. <pre><code>echo '\nexport USERS_API_URL=\"http://localhost:8002\"\nexport TEST_USER_ID=\"1\"\nexport TEST_USERNAME=\"user1\"\nexport TEST_IDENTITY_ID=\"eu-west-1:12345678-1234-1234-1234-c777c9720775\"\nexport TEST_PRIMARY_PERSONA=\"tools\"\nexport TEST_AGE_RANGE=\"18-24\"' &gt;&gt; .venv/bin/activate\n</code></pre></p> <p>To activate and enter the virtual environment. <pre><code>source .venv/bin/activate\n</code></pre></p> <p>To install requirements for the integration tests. <pre><code>pip install -r integ/requirements.txt\n</code></pre></p> <p>To run the tests. <pre><code>pytest integ/test-users.py\n</code></pre></p> <p>You can exit the virtual environment with <code>deactivate</code>.</p> <p>If you want to edit the request bodies for any of the <code>PUT</code> or <code>POST</code> request tests you can do so in <code>json_request_bodies.json</code></p>"},{"location":"Deployment/services/videos/","title":"Videos Service","text":"<p>The Videos service streams product videos and synchronised metadata to Amazon Interactive Video Service and provides stream metadata (stream endpoints and products contained within the stream) via a Flask API. The Web UI makes calls to the service when a user views the 'Live' view. The endpoint provides a list of stream ingest endpoints, each with a list of their associated products, allowing the UI to present all products from the video before they appear in the stream.</p> <p>When deployed to AWS, CodePipeline is used to build and deploy the Videos service as a Docker container to Amazon ECS behind an Application Load Balancer. The Videos service can also be run locally in a Docker container. This makes it easier to iterate on and test changes locally before commiting.</p>"},{"location":"Deployment/services/videos/#deploying-channels-streaming-video","title":"Deploying Channels &amp; Streaming Video","text":"<p>IVS channels are created and managed by the CloudFormation template. The default CloudFormation settings do not create any new IVS streams - instead the demo directs the UI to four externally hosted IVS streams.</p> <p>To create and use IVS channels hosted in your own account, the option 'Use default IVS streams' should be set to 'No' when deploying CloudFormation. In this case, one IVS channel will be created for each '.mkv' video found in the <code>videos/</code> path of the staging S3 bucket. These videos should be uploaded by running the provided staging script - any videos in the local <code>videos/</code> directory will be uploaded.</p> <p>IMPORTANT: Amazon IVS is currently only supported in the N. Virginia (us-east-1), Oregon (us-west-2), and Ireland (eu-west-1) regions. Therefore, to deploy the Retail Demo Store in a region that does not support IVS, be sure to select to use the Default IVS Streams CloudFormation template parameter.</p>"},{"location":"Deployment/services/videos/#custom-videos-metadata","title":"Custom Videos &amp; Metadata","text":"<p>To enable full UI integration with custom videos, metadata must be embedded into the .mkv file.</p> <p>Metadata must be created in the <code>.srt</code> format, with each timestamped entry containing data in the form: <code>{\"productId\": &lt;PRODUCT_ID&gt;}</code>. The Videos service sends the metadata at the start of the timestamp. The latter section of the timestamp is not used. The file can either be edited manually or using an SRT editor (either software or online). An example metadata file can be seen here.</p> <p>This metadata can then be combined with a video file to create an encoded <code>.mkv</code> file with embedded metadata by running the following command: <pre><code>ffmpeg -i &lt;INPUT_VIDEO_PATH&gt; -i &lt;INPUT_METADATA_PATH&gt;.srt -vf scale=640x360 -c:v libx264  \\\n-pix_fmt yuv420p -profile:v main -tune fastdecode -x264opts \u201cnal-hrd=cbr:no-scenecut\u201d -minrate 3000 \\\n-maxrate 3000  -g 60 -c:a aac -b:a 160k -ac 2 -ar 44100 &lt;OUTPUT_FILE_PATH&gt;.mkv\n</code></pre> An <code>.mkv</code> file created with this command is ready to be staged and should provide optimal UI integration. The command also pre-encodes the video in a format designed to reduce the CPU &amp; memory requirements of the Videos service.</p>"},{"location":"Deployment/services/videos/#local-development","title":"Local Development","text":"<p>The Videos service can be built and run locally (in Docker) using Docker Compose. See the local development instructions for details. From the <code>../src</code> directory, run the following command to build and deploy the service locally.</p> <pre><code>foo@bar:~$ docker compose up --build videos\n</code></pre> <p>Once the container is up and running, you can access it in your browser or with a utility such as Postman at http://localhost:8007.</p>"},{"location":"Technical%20Guides/","title":"Index","text":""},{"location":"Technical%20Guides/#introduction","title":"Introduction","text":"<p>Note</p> <p>This part of the documentation is also inside the demo itself (look for the \"demo guide\" on the bottom of each page)</p> <p>The Retail Demo Store is an open source solution which integrates Amazon Personalize, Amazon Pinpoint (Deprecated) and Amazon Lex in a retail web application demo and workshop platform. The Retail Demo Store is intended to be used as an education tool (not designed for production usage) for AWS customers to demonstrate how AWS can be used to build compelling customer experiences for eCommerce, Retail and Digital Marketing use cases.</p> <p>The Retail Demo Store is a fictitious online store that includes users (shoppers), products, carts and orders as well as services for search and recommendations and it helps demonstrate how the product recommendations change based on shopper\u2019s preferences, real-time behavior and history.</p> <p>Throughout the demo store experience, users are delivered (or have the option to be delivered) engagements across multiple channels including email and text (SMS). These messages occur at key moments in the shopper lifecycle, such as signup and abandoned cart. As users interact with the demo store and their emails/texts, real-time segments based on their behavior are created and then personalized engagements across channels are delivered. By utilizing Amazon Pinpoint and Amazon Personalize together, shopper interactions across each of these channels (store, email, SMS) are ingested as a single event stream and fed into the demo store personalization model, achieving omni-channel ML model retraining. On the other side, the ML personalization model is used to deliver personalized experiences across each of these channels a harmonized way.</p>"},{"location":"Technical%20Guides/#architecture","title":"Architecture","text":"<p>The core of the Retail Demo Store is a polyglot microservice architecture deployed as a collection of RESTful   web services in Amazon Elastic Container Service (ECS). Several AWS managed services are leveraged to provide   build, deployment, authentication, messaging, search, and personalization capabilities. The web user interface   is a single page application built using responsive web design frameworks and techniques, producing a native   app-like experience tailored to the user's device. See the Workshops for details.</p> <p></p>"},{"location":"Technical%20Guides/#how-the-retail-demo-store-works","title":"How the Retail Demo Store works","text":"<p>The Retail Demo Store is designed to display how personalization works and the impact it can have on a shoppers   experience. The demo has two main components: first, the storefront user interface and second, the demo guide   which walks the user through all the different components of the web application demo. .</p> <p>The storefront user interface is the actual online store. The products presented will change based on the   shopping preferences of the fictitious \u201cshopper\u201d profile selected. Users will be prompted to select a \u201cshopper\u201d   after account creation or sign in and will be able to switch \u201cshopper\u201d by selecting the \u201cshopper\u201ddetails on the   top-right corner. The demo guide is an educational component that sits on top of the store-front and is designed   to guide users.</p> <p>The demo guide provides more information on how to use the demo during customer meetings. It also includes the   services and use cases enabled in the demo, as well as some frequently asked Personalize topics.</p>"},{"location":"Technical%20Guides/Datasets/","title":"Datasets","text":"<p>The Retail Demo Store uses all three supported dataset types for Amazon Personalize: users, items, and interactions. Additionally, an Amazon Personalize Event Tracker is utilized to capture real-time events in the web user interface which populate the Personalize-managed event interactions dataset. AWS Amplify is used to send events to the Retail Demo Store\u2019s Personalize Event Tracker.</p> <p>With the exception of the real-time event data which is created as a result of your browsing behavior in the web user interface, the data in the users, items, and interactions datasets are composed of fictitious, or in the case of interactions history, synthetically generated data.</p>"},{"location":"Technical%20Guides/EnablingShopperProfiles/","title":"Enabling Shopper Profiles","text":"<p>With Amazon Personalize Solutions and Campaigns created based on the generated users, items, and interactions datasets, we can emulate (or assume) user profiles for different personas in the web user interface to see recommendations that should be consistent with the persona. In order to emulate a profile, you must first sign in to the user account you created for yourself. </p> <p>Once signed in, you'll see the shopper assigned to you on the top right corner. You can switch the shopper at any time by clicking the name of the user and selecting the \"Switch shoppers\" option.</p> <p></p>"},{"location":"Technical%20Guides/ShopperPersonas/","title":"Shopper Personas","text":"<p>To provide a more compelling and intuitive demo experience, each fictitious user in the Retail Demo Store is assigned a shopper persona. The persona is represented by three categories from the Retail Demo Store\u2019s catalog which the user has an affinity. The affinity for each category is also weighted such that the first category is is highest weighted and the third category is the lowest. There are sixteen combinations of categories that represent the personas used across all users.</p> <ul> <li>furniture_homedecor_housewares</li> <li>apparel_footwear_accessories</li> <li>instruments_books_electronics</li> <li>floral_beauty_jewelry</li> <li>grocery_seasonal_wedding</li> <li>outdoors_instruments_grocery</li> <li>housewares_floral_seasonal</li> <li>tools_housewares_apparel</li> <li>electronics_outdoors_footwear</li> <li>seasonal_furniture_floral</li> <li>homedecor_electronics_outdoors</li> <li>accessories_grocery_books</li> <li>footwear_jewelry_furniture</li> <li>beauty_accessories_instruments</li> <li>housewares_tools_beauty</li> <li>books_apparel_homedecor</li> </ul> <p>For example, a user assigned with a persona of \"footwear_outdoors_apparel\" indicates that the user, at least historically, has been primarily interested in products from the Footwear category and to decreasing degrees of interest in products from the Outdoors and Apparel categories. That initial weighted interest is codified in the generation of the historical interaction dataset which is used to train Solutions in Amazon Personalize. So, for our \"footwear_outdoors_apparel\" user, interaction events are generated across products in all three of those categories to create a synthetic history of engaging in products matching that persona. Additionally, some products are tagged with an gender affinity. This is used when generating historical events to filter products against the gender of each user to further add realism to the recommendations.</p> <p>Events for multiple event types are generated to mimic shopping behavior. For example, most generated event types are 'View' to mimic users browsing the site. Occasional checkouts are simulated with 'AddToCart' followed by 'ViewCart', 'StartCheckout', and 'Purchase' events. The Personalize solutions/models are trained on the 'View' event type.</p>"},{"location":"Technical%20Guides/Generative%20AI/PersonalizedProductDescriptions/","title":"Personalized Product Descriptions","text":"<p>Generative AI can be used to automate the creation of marketing content. This includes generating text for blogs, social media posts, and emails, as well as creating images and videos.  This can save marketers a significant amount of time and effort, allowing them to focus on other aspects of their marketing strategy. </p> <p>Where it really shines is the ability to productionize marketing content creation, reducing the needs for marketers to create multiple copies for different customer segments.  Previously, marketers would need to generate many different copies for each granularity of customers (e.g. attriting customers who are between the age of 25-34 and loves food).  Generative AI can automate this process, providing the opportunities to dynamically create these contents.</p> <p>This demo integrates the product service with Amazon Bedrock, to retrieve personalized product descriptions based on the logged-in user's age and interests. Amazon Bedrock makes Foundation Models (FMs) accessible via an API, and in this demo,  Anthropic Claude 3 Haiku is the underlying FM used.</p> <p>The prompt used to generate personalised product descriptions takes the following form:</p> <pre><code>  I'd like you to rewrite the following paragraph using the following instructions:\n  \"{instructions}\"\n\n  \"{original product description}\"\n\n  Please put your rewrite in &amp;lt;p&gt;&amp;lt;/p&gt; tags.\n</code></pre> <p>The instructions used are:</p> <pre><code>Please generate an enhanced product description personalised for a customer aged {age range}, interested in {interests}.\nHowever, do not mention their age in the rewrite.\nThe product is named \"{product name}\" and is a product of type \"{product type}\" in the {product category} category.\n</code></pre> <p></p>"},{"location":"Technical%20Guides/Generative%20AI/RoomGenerator/","title":"Room Makeover","text":"<p>Imagine being able to instantly re-imagine a room in different decor styles.  This demo combines Stable Diffusion, Amazon Sagemaker, Amazon Bedrock and Amazon Rekognition to enable an innovative approach to generating re-styled rooms from an initial user uploadedimage.</p> <p></p> <ol> <li>The user authenticates with Amazon Cognito and obtains an identity token. This is passed through to all subsequent API requests to the API Gateway.</li> <li>User selects a room image through the browser and the Web UI uses AWS Amplify Storage module to upload to S3.</li> <li>The Web UI calls the API Gateway, passing in the S3 location of the uploaded image and the selected room style, to create a room generation request. A unique id is returned that can beused to retrieve the results.</li> <li>The API Gateway uses a Lambda authorizer to validate the supplied identity token. It then proxies the request through to a Lambda function that validates and then persists the requestinto DynamoDB.</li> <li>DynamoDB streams captures the newly inserted room request.</li> <li>A lambda function triggers on each new record in the stream and starts an AWS Step Function to process the request.</li> <li>The first step of the step function performs image analysis on the uploaded room image. The output of the step is a prompt that can passed to the Stable Diffusion model.<ul> <li>Amazon Rekognition is used to detect objects in the image \u2013 such as sofa\u2019s, chairs, and tables. It returns a list of objects, together with their associated bounding boxes.</li> <li>For each object detected, a cropped image is created using the bounding box coordinates.</li> <li>Each image is then converted into a base64 string and sent as a request to Amazon Bedrock to use the Titan Multimodal Embeddings G1 model to obtain an embedding representation of the image.</li> <li>For each embedding, a K-NN request is made to the Amazon OpenSearch service to obtain the closest product matches. The product match will also contain a caption \u2013 pre-generated by  Anthropic\u2019s Claude 3 Haiku model. The caption was generated by passing the product and prompting Claude 3 to describe what\u2019s in the picture.</li> <li>To create the final prompt, an initial base prompt is looked up using the style selected by the customer, which is then combined with the top matching product\u2019s captions using prompt  weighting.</li> </ul> </li> <li>The uploaded room image and prompt are sent to the SageMaker Asynchronous Inference Endpoint. The Step Function pauses at this point until the inference process completes \u2013 implementedusing a callback task token.</li> <li>The SageMaker Endpoint is deployed as a HuggingFace Deep Learning Container, which hosts a custom Stable Diffusion model that uses ControlNet to add depth conditioning of the uploadedimage to 1. the generation. When the model completes the inference process, it places the result in an S3 bucket and sends a notification to an Amazon SNS topic containing the location ofthe result 1. payload.</li> <li>Amazon SNS invokes the Lambda function that is subscribed to the topic. The Lambda function calls-back into the Step Function to resume the process.</li> <li>The final step of the Step Function loads the inference result, extracts the generated image, and places it in the bucket for the customer to access. The final image is also  re-analyzedfollowing the process in step 7, so that new bounding boxes and similar products are retrieved.</li> <li>The Web UI has been polling the API Gateway using the unique ID obtained from the initial request. The room generation response is updated throughout the process. A done state is returned, together with a reference to the final room image, which indicates to the frontend to render the results. The Amplify Storage API is used to generate a signed URL, so that theimage can be  downloaded from S3.</li> </ol>"},{"location":"Technical%20Guides/Generative%20AI/RoomGenerator/#pre-processing-the-product-images","title":"Pre-processing the product images","text":"<p>The first step of the step function performs image analysis on the uploaded room image.  The output of the step is a prompt that can passed to the Stable Diffusion model.</p> <p></p> <ol> <li>A S3 Batch Operations Job executes on the product images bucket and triggers a Lambda function for each image.</li> <li>Lambda function resizes the product image and places resulting image in separate bucket.</li> <li>Lambda function triggers on S3 create event in bucket.</li> <li>Lambda function starts execution of express workflow to process image.</li> <li>Embedding for image are retrieved using Titan Multimodal Embeddings model through Amazon Bedrock.</li> <li>Product captions \u2013 descriptions of what the product image contains \u2013 are created by calling Anthropic Claude 3 Haiku model through Amazon Bedrock.</li> <li>Embedding and caption are published to SQS.</li> <li>Lambda function receives batches of captions &amp; embeddings and indexes them into Amazon OpenSearch.</li> </ol> <p>The prompt used with the Claude 3 Haiku model to generate the product captions was as follows:</p> <pre><code>Identify the {category} product in the image. Then identify the dominant color or colours of the {category} product. Be descriptive. Ignore the background. Name the product and then describe it without any preamble.\n&amp;lt;example&amp;gt;Sofa, deep, plush green color with a smooth, velvet-like texture. It features a rectangular shape with a modern, streamlined silhouette and two cylindrical cushions at either end, serving as armrests. The sofa has three seat cushions that create a single seating surface without separations, and the back cushion runs the length of the sofa in a single piece as well, contributing to its sleek design. There are no visible patterns or prints on the fabric, which gives it a rich, uniform look. The sofa's legs are short, cylindrical, and appear to be made of light-colored wood&amp;lt;/example&amp;gt;\n</code></pre>"},{"location":"Technical%20Guides/Geolocation/LocationServices/","title":"Retail Geofencing and Location-aware Personalization with Amazon Location Services","text":"<p>Warning  Amazon Pinpoint is no longer accepting new customers beginning May 20, 2025 - and support will be ended effective October 30, 2026.  See https://docs.aws.amazon.com/pinpoint/latest/userguide/migrate.html for more details.  Therefore, all messaging functionality has been disabled until the code and workshops are updated.</p> <p>Amazon Location Services is an Amazon provision of maps, location indexing, geofencing, user tracking, and routing. Geofencing can be used to set off chains of events just when they need to be set off - when your customer is in the right place, at the right time. In this demo we use it together with the ecommerce platform and Amazon Pinpoint (Deprecated) to engage customers when they approach physical stores.</p> <p>Customers are inspired to opt in to share their location by being provided with personalized offers. These offers can be related to customer preferences, local stock levels, and more. In this demo we use Amazon Personalize to select an offer to show to a consumer that can be redeemed in-store. The consumer has the extra convenience and we have enaged with them in a targeted fashion and, moreover, attracted them into our bricks and mortar store where the experience will be, naturally, more personal than online.</p> <p>There is also an in-store interface that shows a sample view for store staff showing orders that are about to be collected, and transactional messaging for user and store staff around pickup that is triggered by the user approaching the store for pickup.</p>"},{"location":"Technical%20Guides/Geolocation/LocationServices/#using-the-location-services-demo","title":"Using the Location Services Demo","text":"<p>To use the Amazon Location functionality, Location Services must be enabled in your region. First, ensure you are deploying Retail Demo Store in a region in which Location is enabled. Next, enable \"Deploy Location Services resources\" and \"Deploy personalized offers and pickup notices using Location Services geofencing\" when deploying or updating the solution from CloudFormation. A Location geofence will be set up for you.</p> <p>From any Retail Demo Store \"Shop\" menu You can access the Location \"In-Store View\" where you can see orders made to be collected from in-store. From there you can navigate to \"Location Geofence\" where you can see the Location Services-provided map and simulated user - from here you can initiate simulations of users travelling close to the default configured store either during a scenario where Location Services can be used to enable a quick collection of bought products and related messaging using Pinpoint Transactional Messaging to email, SMS or web (\"collection\" scenario), or where the user might be inspired to enter the store to make a new purhcase through the triggering of personalised messages sent using Pinpoint Campaigns to email, SMS and web, either containing offers chosen with Amazon Personalize or containing notices about unfinished shopping carts (\"purchase\" scenario).</p>"},{"location":"Technical%20Guides/Geolocation/LocationServices/#enable-email-sending","title":"Enable email sending.","text":"<p>If you are in the email \"sandbox\" for Pinpoint, then all recipient emails must be verified according to the below process, to ensure that the emails will be sent.</p> <ul> <li>After deploying the demo, navigate to your Pinpoint application called \"retaildemostore\" in the UI Console (https://console.aws.amazon.com/pinpoint/home making sure that the region is the same one in which you deployed your demo).</li> <li>Click on \"Settings\" &gt; \"Email\" in the navigation menu.</li> <li>Under the \"Identities\" tab, click \"Edit\".</li> <li>Ensure the email channel for the project is set to \"Enabled\" (this will be set after Amazon Personalize campaigns are finished deploying, but you may set it beforehand).</li> <li>For the email that you used when you deployed the solution under \"Reply-To email address\", ensure that the email address is verified. Select this as your \"Default sender address\".</li> <li>For every email to which you plan to send emails, ensure that the email address is verified.</li> <li>Save the changes.</li> </ul> <p>Note that you can manage your email and SMS limits within the \"Settings\" &gt; \"Email\" and \"Settings\" &gt; \"SMS and voice\" menus available under your Pinpoint project. Also note that there are additional limits imposed when your account is in the Pinpoint \"sandbox\". Enable SMS sending.</p> <p>Ensure any phone number in the Pinpoint database to which you intend to send promotional messages (the \"purchase\" journey above - for the \"collection\" journey, the phone number will be recorded against the order) has opted in to receive promotional messages. For more information on how to ensure this, see the \"Two-Way SMS with Pinpoint\" section in the Pinpoint messaging workshop. In brief, you need to (in the USA):</p> <ul> <li>Subscribe to a long-code that supports SMS through the Pinpoint UI so that Pinpoint has a number to send messages from (this is a requirement in the USA to send messages).</li> <li>Enable 2-way messaging on that long-code and choose the SNS PinpointIncomingTextAlerts topic that was deployed along with Retail Demo Store to send messages to, so that responses to verification SMS messages can be processed to opt in users.</li> <li>Enter your phone number from the UI to start the verification process and reply to the text message sent to your phone to opt in. </li> </ul>"},{"location":"Technical%20Guides/Marketing%20and%20Amazon%20Pinpoint/PersonalizedEmails/","title":"Personalized Emails: Welcome and Abandoned Cart","text":"<p>Warning  Amazon Pinpoint is no longer accepting new customers beginning May 20, 2025 - and support will be ended effective October 30, 2026.  See https://docs.aws.amazon.com/pinpoint/latest/userguide/migrate.html for more details.  Therefore, all messaging functionality has been disabled until the code and workshops are updated.</p> <p>Amazon Pinpoint enables organizations to deliver messages across email, text, mobile push, voice, and custom channels like messenger apps and retail apps. These messages can be augmented with data output from ML services like Amazon Personalize for Personalization, Recommendations, Next-Best-Actions, among other use cases. User attributes from Amazon Personalize can be selected within the Amazon Pinpoint console or API in order to personalize the content of email templates in real-time. Importantly, this enables organizations to deliver a unified, omni-channel personalization experience.</p> <p>Here,</p> <ol> <li> <p>Pinpoint sends new users a welcome email after they sign up for a Retail Demo Store account. Check the email entered during account creation and look for the Retail Demo Store welcome email. If you\u2019d like to send the email to a different email address, go to the Account settings page and enter the new one.</p> </li> <li> <p>When Retail Demo Store users add items to their shopping cart but do not complete an order, Amazon Pinpoint send an email with a coupon code encouraging them to finish their order. To see this feature, add a few items to your shopping cart. In the shopping cart page, click on the button that says \u201dTrigger Abandoned Cart email\u201d. This action will emulate a signed out event and will trigger the abandoned cart email sent by Amazon Pinpoint. Next, check the email account provided during account creation. The Abandoned Shopping Cart email will be in your inbox.</p> </li> </ol>"},{"location":"Technical%20Guides/Marketing%20and%20Amazon%20Pinpoint/TextMessaging/","title":"Text Messaging (SMS): Personalized Alerts and Promotions","text":"<p>Warning  Amazon Pinpoint is no longer accepting new customers beginning May 20, 2025 - and support will be ended effective October 30, 2026.  See https://docs.aws.amazon.com/pinpoint/latest/userguide/migrate.html for more details.  Therefore, all messaging functionality has been disabled until the code and workshops are updated.</p> <p>Amazon Pinpoint has deep configuration options for SMS (text) messaging and can deliver messages to every country in the world. Retail / eCommerce organizations have many use cases for text messaging - including transactional uses like purchase confirmations and marketing uses like promotions. These messages can be augmented with data output from ML services like Amazon Personalize for Personalization, Recommendations, Next-Best-Actions, among other use cases. User attributes from Amazon Personalize can be selected within the Amazon Pinpoint console or API in order to personalize the content of templates in real-time. Importantly, this enables organizations to deliver a unified, omni-channel personalization experience.</p> <p>This demo showcases personalized product recommendation via text message. Try this feature by opting-in to receive text alerts.</p>"},{"location":"Technical%20Guides/Marketing%20and%20Amazon%20Pinpoint/TextMessaging/#enable-sms-sending-for-the-usa","title":"Enable SMS sending for the USA.","text":"<p>In the USA it is a legal requirement that you subscribe to a phone number or long code in order to be able to send text messages and receive them. If you have not followed the Pinpoint messaging workshop to enable messaging, but you set \"Auto-Configure Pinpoint\" to \"Yes\" when you deployed the demo, you are almost set up. The following steps show how you can finish set-up:</p> <ol> <li>Subscribe to a long-code or phone number that supports SMS through the Pinpoint UI so that Pinpoint has a number to send messages from.<ol> <li>Go to your Pinpoint AWS console in the region into which Retail Demo Store is deployed.</li> <li>Choose \"Settings ... SMS\" or \"Settings... Voice and SMS\"</li> <li>Click \"Request phone number\", choosing \"United States\" for the country.</li> <li>Ensure the number type is \"Toll-free\" and that \"SMS\" option is checked.</li> <li>Click \"Next\" then \"Request\".</li> </ol> </li> <li>Enable two-way SMSs to enable Retail Demo Store to receive messages sent to the dedicated number and opt in users.<ol> <li>Go back to \"Settings ... SMS\" or \"Settings... Voice and SMS\"</li> <li>Click on your newly registered phone number under \"Number settings\"</li> <li>Expand \"Two-way SMS\" and click \"Enable two-way SMS\".</li> <li>Under \"Incoming messages destination\" click \"Choose an existing SNS topic\" and choose the topic that contains the text \"PinpointIncomingTextAlertsSNSTopic\" which was put there by CloudFormation when you deployed your store. </li> </ol> </li> <li>Tell Retail Demo Store about the phone number you have acquired.<ol> <li>So that Retail Demo Store can make use of the dedicated number you acquired above, take note of the number and navigate to Systems Manager AWS console in the region Retail Demo Store is deployed.</li> <li>Find the parameter named \"retaildemostore-pinpoint-sms-longcode\" and click on \"edit\", then enter the value for your dedicated the phone number (including the country code as in <code>+11234567890</code>). You may also enter this information when deploying Retail Demo Store with CloudFormation.</li> </ol> </li> </ol>"},{"location":"Technical%20Guides/Marketing%20and%20Amazon%20Pinpoint/TextMessaging/#opt-in-for-text-alerts","title":"Opt in for text alerts.","text":"<p>The home page, shopping cart page and every product page in the store include a field to opt-in. Enter the mobile phone number where you\u2019d like to receive the one-time automated marketing message.</p> <p></p> <p>You will receive a text message to confirm the subscription. Reply \u201cY\u201d to confirm. Upon confirmation, you\u2019ll receive a 20% discount code.</p> <p>Next, you\u2019ll receive one text message with one personalized product recommendation. The message will include a URL that will redirect you to the Retail Demo Store</p>"},{"location":"Technical%20Guides/Marketing%20and%20Amazon%20Pinpoint/UserSegmentation/","title":"Real-Time User Segmentation","text":"<p>Warning  Amazon Pinpoint is no longer accepting new customers beginning May 20, 2025 - and support will be ended effective October 30, 2026.  See https://docs.aws.amazon.com/pinpoint/latest/userguide/migrate.html for more details.  Therefore, all messaging and segmentation functionality has been disabled until the code and workshops are updated.</p> <p>Amazon Pinpoint enables organizations to create user segments - or groups of customers - based on their behavior across web/mobile applications, interactions over email, text, push notifications, and other channels, or based on stored data. This is important in retail environments because customers deliver valuable intent data across in-store, e-commerce, and customer engagement channels. Pinpoint enables organizations to create a single event bus of all these interactions to inform segmentation, personalized messaging, and analytics.</p> <p>These segments can often be created and responded to in real-time. Here, your clickstreams in the Retail Demo Store application are ingested by Amazon Pinpoint to create new user segments in real-time. These segments are then used to deliver the targeted messages that receive throughout the demo.</p> <p>AWS Messaging And Targeting Blog</p> <p>\u201cWe want to send messages through dynamic segmentation.When we send a push notification, we need to dynamically segment immediately. When we call AmazonPinpoint to say \u201cCreate this segment right now, for this game event that\u2019s happening right now, and thencreate this campaign right now, and then send it, and Pinpoint does all of that in milliseconds.\u201d</p> <p>Read full AWS Messaging &amp; Targeting Blog post: How Disney Streaming Services Uses Amazon Pinpoint to Send Personalized Messages to Millions of Users in Real Time</p>"},{"location":"Technical%20Guides/Personalisation%20with%20Amazon%20Personalize/2-Personalization/","title":"Personalization","text":"<p>Personalized user experiences are implemented across several features within the Retail Demo Store web user interface that demonstrate three core use-cases of Amazon Personalize as well as real-time recommendations.</p> <p>In order to demonstrate the personalization capabilities of the Retail Demo Store, the required Amazon Personalize Solutions and Campaigns must already be created and enabled via Amazon SSM Parameters. These Solutions and Campaigns can be created as part of the Personalization workshop bundled with the Retail Demo Store or automatically when the Retail Demo Store is deployed via CloudFormation. If you\u2019re demonstrating with the Retail Demo Store this should already be done for you but still good to be aware if personalization features are not working as expected.</p>"},{"location":"Technical%20Guides/Personalisation%20with%20Amazon%20Personalize/2-Personalization/#datasets","title":"Datasets","text":"<p>The Retail Demo Store uses all three supported dataset types for Amazon Personalize: users, items, and interactions. Additionally, an Amazon Personalize Event Tracker is utilized to capture real-time events in the web user interface which populate the Personalize-managed event interactions dataset. AWS Amplify is used to send events to the Retail Demo Store\u2019s Personalize Event Tracker.</p> <p>With the exception of the real-time event data which is created as a result of your browsing behavior in the web user interface, the data in the users, items, and interactions datasets are composed of fictitious, or in the case of interactions history, synthetically generated data.</p>"},{"location":"Technical%20Guides/Personalisation%20with%20Amazon%20Personalize/2-Personalization/#shopper-personas","title":"Shopper Personas","text":"<p>To provide a more compelling and intuitive demo experience, each fictitious user in the Retail Demo Store is assigned a shopper persona. The persona is represented by three categories from the Retail Demo Store\u2019s catalog which the user has an affinity. The affinity for each category is also weighted such that the first category is is highest weighted and the third category is the lowest. There are 16 combinations of categories that represent the personas used across all users.</p> <ul> <li>furniture_homedecor_housewares</li> <li>apparel_footwear_accessories</li> <li>instruments_books_electronics</li> <li>floral_beauty_jewelry</li> <li>groceries_seasonal_tools</li> <li>outdoors_instruments_groceries</li> <li>housewares_floral_seasonal</li> <li>tools_housewares_apparel</li> <li>electronics_outdoors_footwear</li> <li>seasonal_furniture_floral</li> <li>homedecor_electronics_outdoors</li> <li>accessories_groceries_books</li> <li>footwear_jewelry_furniture</li> <li>books_apparel_homedecor</li> <li>beauty_accessories_instruments</li> <li>housewares_tools_beauty</li> </ul> <p>For example, a user assigned with a persona of \"footwear_jewelry_furniture\" indicates that the user, at least historically, has been primarily interested in products from the Footwear category and to decreasing degrees of interest in products from the Jewelry and Furniture categories. That initial weighted interest is codified in the generation of the historical interaction dataset which is used to train Solutions in Amazon Personalize. So, for our \"footwear_jewelry_furniture\" user, interaction events are generated across products in all three of those categories to create a synthetic history of engaging in products matching that persona. Additionally, some products are tagged with an gender affinity. This is used when generating historical events to filter products against the gender of each user to further add realism to the recommendations.</p> <p>Events for multiple event types are generated to mimic shopping behavior. For example, most generated event types are 'View' to mimic users browsing the site. Occasional checkouts are simulated with 'AddToCart' followed by 'ViewCart', 'StartCheckout', and 'Purchase' events. The Personalize solutions/models are trained on the 'View' event type.</p>"},{"location":"Technical%20Guides/Personalisation%20with%20Amazon%20Personalize/2-Personalization/#emulating-shopper-profiles","title":"Emulating Shopper Profiles","text":"<p>With Amazon Personalize Solutions and Campaigns created based on the generated users, items, and interactions datasets, we can emulate (or assume) user profiles for different personas in the web user interface to see recommendations that should be consistent with the persona. In order to emulate a profile, you must first sign in to the user account you created for yourself as described in Creating a Retail Demo Store account. Once signed in, you can click on your username in the top right-corner and then select Switch Shoppers.</p> <p></p> <p>Figure 7. Access Profile Page.</p> <p>You can have a shopper auto-selected for you or you can choose your own. In the shopper selection window, specify an age range and a primary shopping interest. Click Submit and a closely matching shopper is shown, confirm your choice or try again. Product recommendations should now match the persona of the shopper you've selected.</p> <p>It is recommended to open a new Incognito (Chrome) or Private (Firefox) browser window when testing personalization features of the web UI. The reason for this is because Amplify keeps all of your events tied to the same logical session. Signing out and back in as a different account does not change this behavior. You must close and reopen Private/Incognito windows to switch between profiles.</p>"},{"location":"Technical%20Guides/Personalisation%20with%20Amazon%20Personalize/2-Personalization/#use-case-1-personalized-product-recommendations","title":"Use-Case 1: Personalized Product Recommendations","text":"<p>Amazon Personalize Recipe: User-Personalization</p> <p>The user personalization use-case is implemented on the bottom half of the Retail Demo Store home view when you are signed in to a Retail Demo Store user account. Be sure to emulate a shopper profile as described above so that a persona is linked to your session. Product recommendations in the \u201cInspired by your shopping trends\u201d section are being powered by Amazon Personalize. If you\u2019re not signed in, featured products will be displayed here instead.</p> <p>Since the Retail Demo Store is using a Personalize Event Tracker to record real-time interaction events, it is important to keep in mind that recommendations will change as a result of your clicking and browsing activity in the web application. Therefore, the recommendations may not match up to the original shopper persona used to train the model. This is a powerful demo feature, though, since it shows how Personalize adapts to evolving user intent. It can also show how recommendations adapt for new users (i.e. cold starting users).</p> <p></p> <p>Figure 8. User recommendation use-case.</p>"},{"location":"Technical%20Guides/Personalisation%20with%20Amazon%20Personalize/2-Personalization/#use-case-2-related-products-recommendations","title":"Use-Case 2: Related Products Recommendations","text":"<p>Amazon Personalize Recipe: SIMS</p> <p>The related products use-case is implemented on the product detail page in the Retail Demo Store. Since inference calls to campaigns built with the SIMS recipe do not require a user, we are able to display related products using SIMS whether you are signed in as a user or anonymous.</p> <p></p> <p>Figure 9. Related products use-case.</p>"},{"location":"Technical%20Guides/Personalisation%20with%20Amazon%20Personalize/2-Personalization/#use-case-3-personalized-product-ranking","title":"Use-Case 3: Personalized Product Ranking","text":"<p>Amazon Personalize Recipe: Personalized-Ranking</p> <p>When you are signed in as a Retail Demo Store user, the personalized ranking use-case is implemented on the category view in the Retail Demo Store. When you are an anonymous user, products are displayed in their natural order (i.e. not ranked). The most effective view to demonstrate this use-case is on the \u201cFeatured\u201d product view. The reason for this is that this is the one category view that includes products from multiple categories. Therefore, the ranking should be more impactful.</p> <p></p> <p>Figure 10. Personalized Ranking use-case.</p> <p>You can also see personalized ranking in product search results. That is, if you are signed in as a user, search results are reranked based on the user's historical and real-time activity.</p> <p></p>"},{"location":"Technical%20Guides/Personalisation%20with%20Amazon%20Personalize/2-Personalization/#event-tracking","title":"Event Tracking","text":"<p>The following semantic interaction event types are instrumented in the Retail Demo Store web user interface. Each time a user (anonymous or known) performs one the following actions, an event is sent to both Amazon Pinpoint (signed in only) and an Amazon Personalize Event Tracker (if configured).</p> <ul> <li>Search \u2013 the user performed a product search</li> <li>View \u2013 the user viewed details for a product</li> <li>AddToCart \u2013 the user added a product to their shopping cart</li> <li>RemoveFromCart \u2013 the user removed a product from their shopping cart</li> <li>UpdateQuantity \u2013 the user changed the quantity of a product in their shopping cart</li> <li>ViewCart\u2013 the user viewed their shopping cart</li> <li>StartCheckout \u2013 the user initiated the checkout process</li> <li>Purchase \u2013 the user completed an order by completing the checkout process</li> </ul> <p>To assess the impact of real-time event tracking in recommendations made by the user recommendations on the home page, follow these steps.</p> <ol> <li>Sign in as (or create) a storefront user.</li> <li>View the product recommendations displayed on the home page under the \"Inspired by your shopping trends\" header. Take note of the products being recommended.</li> <li>View products from categories that are not being recommended by clicking on their \"Details\" button. When you view the details for a product, an event is fired and sent to the Personalize event tracker.</li> <li>Return to the home page and you should see products being recommended that are the same or similar to the ones you just viewed.</li> </ol>"},{"location":"Technical%20Guides/Personalisation%20with%20Amazon%20Personalize/2-Personalization/#event-instrumentation","title":"Event Instrumentation","text":"<p>If you are demonstrating the Retail Demo Store to a more technical audience, you can illustrate how the events are sent to Pinpoint and Personalize in the background. To do so, open up the Developer Tools in the web browser you\u2019re using (i.e. Chrome), select the Network view, and find the calls to \u201cevents\u201d (Personalize) and \u201clegacy\u201d (Pinpoint). The screenshot below illustrates how to display the network call to the Personalize Event Tracker for the \u201cput_events\u201d endpoint. This is implemented using AWS Amplify to instrument events in the web user interface.</p> <p></p> <p>Figure 11. Event instrumentation calls</p>"},{"location":"Technical%20Guides/Personalisation%20with%20Amazon%20Personalize/2-Personalization/#filtering-recommendations","title":"Filtering Recommendations","text":"<p>Amazon Personalize supports the ability to create filters that can be used to filter (or exclude) items from being recommended that match a filter's criteria. The Retail Demo Store uses a filter to exclude products which have been recently purchased by the current user.</p> <p>As noted in the Event Tracking section above, the Retail Demo Store's web application sends an <code>Purchase</code> event for each product purchased by the user. We can use this event type in the following filter expression.</p> <pre><code>EXCLUDE itemId WHERE INTERACTIONS.event_type in (\"Purchase\")\n</code></pre> <p>The filter is created using the CreateFilter API. When a filter is created, a Filter ARN is generated which can then be used when retrieving recommendations to apply the filter.</p> <p>To demonstrate this capability, purchase one or more recommended products from the \"Inspired by your shopping trends\" section of the home page by adding them to your cart and checking out. Then return to the home page. The product(s) you just purchased should no longer be recommended.</p>"},{"location":"Technical%20Guides/Personalisation%20with%20Amazon%20Personalize/Batch%20Recommendations/","title":"Batch Recommendations","text":"<p>While real-time recommendations are highly recommended, Amazon Personalize does support batch recommendations. Batch recommendations let you generate personalized recommendations for a large number of users, or similar items for a large number of items, in one go, and then use them in batch processes, such as sending emails or notifications.</p> <p></p>"},{"location":"Technical%20Guides/Personalisation%20with%20Amazon%20Personalize/Batch%20Recommendations/#aws-news-blog","title":"AWS News Blog","text":"<p>Batch Recommendations in Amazon Personalize</p>"},{"location":"Technical%20Guides/Personalisation%20with%20Amazon%20Personalize/Customers%20Who%20Viewed%20X%20Also%20Viewed/","title":"Customers Who Viewed X Also Viewed","text":"<p>Official Documentation</p> <p>Related item recommendations help users discover new products or compare existing items in your catalog. Amazon Personalize recommends similar items in real-time, based on user behavior to create unique, relevant experiences for your customers.</p> <p>Pretty simple idea, implemented via item-item collaborative filtering but basically look at how people are interacting with particular products and then determine how similar things are at a global level based on that data. Not user specific at all.</p>"},{"location":"Technical%20Guides/Personalisation%20with%20Amazon%20Personalize/DataToProvide/","title":"What data should I provide?","text":"<p>Amazon Personalize recognizes three types of historical data:</p> <ul> <li>Users \u2013 This data is intended to provide information about your users such as age, gender, or loyalty membership which can be important signals in personalization systems.</li> <li>Items \u2013 This data is intended to provide information about your items, such as their description, price, SKU type, or   availability. In the case of unstructured text such as product descriptions, Personalize will use ML-based   natural language processing (NLP) to extract key information about your products to provide more relevant recommendations.</li> <li>Interactions \u2013 This data is historical interactions between users and items. It can also provide information on   your user's browsing context, such as their location or device (mobile, tablet, desktop, and so on).</li> </ul> <p></p> <p>The user and item data are metadata types and only used in certain use cases. Please see the documentation for further technical details.</p> <p>Each type of data that Amazon Personalize recognizes has required fields, reserved keywords and datatypes. Please see table below for details.</p> <p>Amazon Personalize will train and deploy a model based on this data. Developers can then use a simple inference API to get individualized recommendations at run-time and generate a personalized experience for the end users according to the type of personalization model (e.g. user personalization, similar items or personalized rankings). Amazon Personalize works best for large datasets that have over 50 users, 50 items, and 1500 interactions.</p>"},{"location":"Technical%20Guides/Personalisation%20with%20Amazon%20Personalize/FrequentlyBoughtTogether/","title":"Frequently Bought Together","text":"<p>Amazon Personalize Recipe: Frequently-Bought-Together</p> <p>A common cross-selling technique on e-commerce sites is recommending items that other users have frequently bought together. The idea is to encourage users to add more products to their shopping cart and thereby increasing average order value and the bottom line. Amazon Personalize implements this use case with the Frequently Bought Together retail recommender. This recommender can be deployed as part of your shopping cart or checkout views or when users add new items to their cart.</p>"},{"location":"Technical%20Guides/Personalisation%20with%20Amazon%20Personalize/MachineLearningUserSegmentation/","title":"Machine Learning User Segmentation","text":""},{"location":"Technical%20Guides/Personalisation%20with%20Amazon%20Personalize/MachineLearningUserSegmentation/#amazon-personalize-recipes","title":"Amazon Personalize Recipes:","text":"<p>Item-Affinity Item-Attribute-Affinity</p> <p>Traditionally, user segmentation depends on demographic or psychographic information to sort users into predefined audiences. More advanced techniques look to identify common behavioral patterns in the customer journey (such as frequent site visits, recent purchases, or cart abandonment) using business rules to derive users' intent. These techniques rely on assumptions about the users' preferences and intentions that limit their scalability, don't automatically learn from changing user behaviors, and don't offer user experiences personalized for each user. User segmentation in Amazon Personalize uses ML techniques, developed and perfected at Amazon, to learn what is relevant to users. Amazon Personalize automatically identifies high propensity users without the need to develop and maintain an extensive and brittle catalog of rules. This means you can create more effective user segments that scale with your catalog and learn from your users' changing behavior to deliver what matters to them.</p> <p>The Amazon Personalize User Segmentation recipes are simple to use. Provide Amazon Personalize with data about your items and your users' interactions and Amazon Personalize will learn your users' preferences. When given an item or item-attribute Amazon Personalize recommends a list of users sorted by their propensity to interact with the item or items that share the attribute.</p> <p>Some common retail use cases for user segmentation include marketing campaigns to promote excess inventory or new items added to a catalog. With the Item-Affinity recipe, you can create segments of users with an affinity for existing items with excess or lazy inventory. With the Item-Attribute-Affinity recipe, you can create segments of users with an affinity for new items based on their bahavior with existing items with similar attributes.</p> <p>You can read more about User Segmentation on the .</p> <p>This project comes with a step-by-step workshop that will guide you through how to build an item attribute affinity custom solution and run a batch segmentation job that will generate user segments based on affinity for product categories.</p>"},{"location":"Technical%20Guides/Personalisation%20with%20Amazon%20Personalize/MetricsAndImpact/","title":"Metrics and understanding impact","text":"<p>You can measure the performance of ML recommender systems using offline and online metrics.</p> <p>Online metrics are the empirical results observed in your user\u2019s interactions with real-time recommendations provided in a live environment.</p> <p>Offline metrics allow you to view the effects of modifying hyperparameters and algorithms used to train your models, calculated against historical data.</p> <p>Amazon Personalize generates offline metrics using test datasets derived from the historical data you provide. These metrics showcase how the model recommendations performed against historical data. Offline metrics are a great representation of how your hyperparameters and data features influence your model\u2019s performance against historical data. To find empirical evidence of the impact of Amazon Personalize recommendations on your business metrics, such as click-through rate, conversion rate, or revenue, you should test these recommendations in a live environment, getting them in front of your customers.</p>"},{"location":"Technical%20Guides/Personalisation%20with%20Amazon%20Personalize/MetricsAndImpact/#aws-machine-learning-blog","title":"AWS Machine Learning Blog","text":"<p>Using A/B testing to measure the efficacy of recommendations generated by Amazon Personalize</p> <p>Machine learning (ML)-based recommender systems aren\u2019t a new concept, but developing such a system can be a resource-intensive task\u2014from data management during training and inference, to managing scalable real-time ML-based API endpoints. Amazon Personalize allows you to easily add sophisticated personalization capabilities to your applications by using the same ML technology used on Amazon.com for\u2026</p> <p>Read more</p> <p></p>"},{"location":"Technical%20Guides/Personalisation%20with%20Amazon%20Personalize/MetricsAndImpact/#aws-partner-network-apn-blog","title":"AWS Partner Network (APN) Blog","text":"<p>Measuring the Effectiveness of Personalization with Amplitude and Amazon Personalize</p> <p>This post will present an architecture that combines Amazon Personalize and Amplitude\u2019s product intelligence platform to track user behavior in real time.</p> <p>It\u2019ll also show how to deploy a sample e-commerce application in your Amazon Web Services (AWS) account, which includes a self-guided workshop created by Amplitude to help you become familiar with its capabilities...</p> <p>Read more</p>"},{"location":"Technical%20Guides/Personalisation%20with%20Amazon%20Personalize/OmniChannel/","title":"Omni-Channel Personalization &amp; ML Model Retraining","text":"<p>By connecting Amazon Pinpoint with Amazon Personalize (or other ML services), organizations can take their customers\u2019 interactions across channels and feed them into their foundational Personalization models for omni-channel ML model retraining.</p> <p>This enables organizations to utilize all of their customers\u2019 digital interactions within a centralized ML model to get smarter, faster. This also enables organizations to deliver personalized experiences in an omni-channel fashion, meaning the experiences are harmonized and responsive across their channels of engagement.</p>"},{"location":"Technical%20Guides/Personalisation%20with%20Amazon%20Personalize/OmniChannel/#case-study","title":"Case Study","text":"<p>Domino's Pizza Enterprises Ltd (DPE) is one of the largest pizza businesses in the world; their vision is to be the leader in deliveries in every neighborhood.</p> <p>\"The customer is at the heart of everything we do at Domino's and we are working relentlessly to improve and enhance their experience. Using Amazon Personalize, we are able to achieve personalization at scale across our entire customer base, which was previously impossible. Amazon Personalize enables us to apply context about individual customers and their circumstances, and deliver customized communications such as special deals and offers through our digital channels.\"</p> <p>Read full Domino's Pizza\u2019s case study: Domino\u2019s Pizza Enterprises Delivers in Record Time Using AWS for Predictive Ordering</p>"},{"location":"Technical%20Guides/Personalisation%20with%20Amazon%20Personalize/PersonalizedRanking/","title":"Personalized Ranking","text":"<p>Amazon Personalize Recipe: Personalized-Ranking</p> <p>Regularly your business priorities require you to promote specific content or products, such as trending news, a hit new TV show, seasonal merchandise, or a time bound promotional offer. Whether the source is a person, business rules around product lifecycle management, or a line of code, Amazon Personalize enables you to re-rank your product catalog to achieve your business priorities and best customer experience.</p> <p>Uses the same HRNN algorithm underneath User-Personalization but takes in a user AND a collection of items. This will then look at the collection of items and rank them in order of most relevant to least for the user. This is great for promoting a pre-selected collection of items and knowing what is the right thing to promote for a particular user.</p> <p>You can see the personalized ranking use-case on the on the \u201cFeatured\u201d products view. The products are re-ranked based on the fictitious shopper's historical and real-time activity.</p>"},{"location":"Technical%20Guides/Personalisation%20with%20Amazon%20Personalize/PopularByPurchases/","title":"Best Sellers: Popular by Purchases","text":"<p>Amazon Personalize Recipe: Popular-by-Purchases</p> <p>Recommends best selling products based on how many times customers have purchased an item. The best selling items have the most \"Purchase\" interactions with unique users. The recipe returns the same best selling items for all users. Therefore, recommendations are not personalized to the individual user and are useful when you want a system-wide representation of what's selling across the site.</p> <p>You may notice some items are annotated with a \"Promoted\" banner across the top of the product image. This banner indicates products that match a promotional filter that is optionally applied when retrieving recommendations. Promotional filters are a great way to ensure that a user-defined percentage of recommended items match a specific filter expression but are also relevant to the user. This can be used to highlight products on sale or new products recently added to the catalog.</p>"},{"location":"Technical%20Guides/Personalisation%20with%20Amazon%20Personalize/PopularByViews/","title":"Most Viewed: Popular by Views","text":"<p>Amazon Personalize Recipe: Popular-by-Views</p> <p>Recommends popular products based on how many times customers have viewed an item. The most popular items have the most \"View\" interactions with unique users. The recipe returns the same popular items for all users. Therefore, recommendations are not personalized to the individual user and are useful when you want a system-wide representation of what's popular.</p> <p>Popular by Views is implemented used on the homepage to display popular items when there is not browsing history for the current user (i.e. cold user). Once the known or anonymous user has more than three interactions (this is an arbitrary number chosen in the Retail Demo Store's implementation), the storefront will switch to a personalized recommendation using the Recommended For You retail recommender. You can tell when this transition is made when the homepage grid header changes from \"Popular products\" to \"Inspired by your shopping trends\".</p> <p>You may notice some items are annotated with a \"Promoted\" banner across the top of the product image. This banner indicates products that match a promotional filter that is optionally applied when retrieving recommendations. Promotional filters are a great way to ensure that a user-defined percentage of recommended items match a specific filter expression but are also relevant to the user. This can be used to highlight products on sale or new products recently added to the catalog.</p>"},{"location":"Technical%20Guides/Personalisation%20with%20Amazon%20Personalize/RealTimePersonalization/","title":"Real time personalization based on real time user activity","text":"<p>Amazon Personalize can capture live events from your users to achieve real-time personalization. Amazon Personalize can blend real-time user activity data with existing user profile and item information to recommend the most relevant items, according to the user\u2019s current session and activity.</p> <p>Do you have the infrastructure in place for real-time click streaming events back into Personalize? If not, don\u2019t worry, we can help!</p> <p>Build: Learn more about the AWS services available to build real-time streaming capabilities Buy: AWS is partnering with multiple partners to translate and send your data to Amazon Personalize in the right format.</p> <p></p>"},{"location":"Technical%20Guides/Personalisation%20with%20Amazon%20Personalize/RealTimePersonalization/#provisioning-capacity-for-real-time-recommendations","title":"Provisioning capacity for real-time recommendations","text":"<p>Customers are charged based on the transaction-per-second (TPS) capacity provisioned or used, whichever is   greater. When creating an Amazon Personalize campaign, a customer sets their minimum TPS capacity. TPS capacity   is measured on a TPS-hour basis (rounded up to the nearest hour). If the customer\u2019s transaction load exceeds the   minimum provisioned capacity, Amazon Personalize will auto-scale based on the customer\u2019s needs. In most cases   when a customer starts with Amazon Personalize, we recommend provisioning the minimum (1 TPS), then   experimenting to see the impact of Personalize for users. These learnings will help inform how to scale based on   their needs to avoid unexpected charges due to over-provisioning.</p>"},{"location":"Technical%20Guides/Personalisation%20with%20Amazon%20Personalize/RealTimePersonalization/#customer-use-case-keen","title":"Customer use case: KEEN","text":"<p>KEEN is a values led, independently owned outdoor footwear brand with a mission to responsibly create original and versatile products, improve lives, and inspire outside adventure. Founded in 2003, KEEN ignited a revolution in the footwear industry with the introduction of the Newport sandal, launching the concept of Hybrid footwear into the market and setting KEEN on a path of driving consistent product innovation that exists today.</p> <p>\"Over the past two years KEEN has been working to improve the way we engage our customers to bring them increasingly relevant content for their outdoor footwear needs. Our goal is to educate our customers on the best footwear options based on their desired outdoor activities. To really bring this capability to life we turned to AWS and our partnership with Data in the Raw and develop a solution powered by Amazon Personalize to use purchase and browsing history to best tailor recommendations and content for our customers along their purchasing journey. With the initial use we looked to improve the experience for our browse abandon customers through our email program. Initial results are encouraging, our open rates, Rev/M Sends, and Opt out Rates were very healthy to begin with but with the implementation of Amazon Personalize we are seeing, email CTR is up 67% over our control messaging. Rev/M Sends is up 49%, and because the content is even more relevant, our Opt out Rate has dropped 36%. But where the rubber hits the road for me is on revenue. Test emails have shown a 12.5% increase in revenue versus the control. It is clear that the AWS has given us another \u2018arrow in our quiver\u2019. My only regret is this capability didn\u2019t exist two years ago when we started this journey.\"</p>"},{"location":"Technical%20Guides/Personalisation%20with%20Amazon%20Personalize/RealTimePersonalization/#customer-use-case-data-in-the-raw","title":"Customer use case: Data in the Raw","text":"<p>Data in the Raw helps online retailers and content producers build scalable analytics and machine learning infrastructures. With just one JavaScript tag, Data in the Raw can start automatically capturing users\u2019 unfiltered web data, from which they create a custom behavioral CRM on AWS. That CRM can be used with business intelligence software and can help enable personalization, conversion rate optimization, user experience/user interaction analysis, attribution modeling, and more. The company describes their offering as a self-service big data pipeline to AWS.</p> <p>\u201cIn this time of one-size-fits-all personalization and expensive customer data platforms, Data in the Raw is different. Unlike other platforms that sell users back their own data, our affordable pricing already includes ownership of raw clickstream data. With the recent release of Amazon Personalize, our clients are now shifting away from boring and bloated personalization platforms to build experiences that reach their customers more efficiently. Not only do our clients save thousands of dollars using Data in the Raw and Amazon Personalize, they have ultimate control over their own data and freedom to build what works for them. With our core values of data democratization, Data in the Raw and Amazon Personalize are the perfect match.\u201d</p>"},{"location":"Technical%20Guides/Personalisation%20with%20Amazon%20Personalize/RecommendedForYou/","title":"Recommended For You","text":"<p>Amazon Personalize Recipe: Recommended-For-You</p> <p>Product and content recommendations tailored to a user's profile and habits are more likely to drive higher engagement and conversion. Amazon Personalize helps tailor recommendations to users behavior, preferences, and history, boosting their engagement and satisfaction in real-time, instead of providing a uniform experience. The Recommended For You recipe also handles the \u201ccold-start\u201d challenge where limited or no historical information is known about an item or user. Recommended For You in Amazon Personalize balances recommending fresh items with the most relevant based on a user's unique preferences and behaviors while also automatically excluding products that have been recently purchased for each user.</p> <p>You may notice some items are annotated with a \"Promoted\" banner across the top of the product image. This banner indicates products that match a promotional filter that is optionally applied when retrieving recommendations. Promotional filters are a great way to ensure that a user-defined percentage of recommended items match a specific filter expression but are also relevant to the user. This can be used to highlight products on sale or new products recently added to the catalog.</p> <p>You can read more about promotional filters on the .</p> <p>Recommended For You is implemented in the \u201cInspired by your shopping trends\u201d section of the homepage. Try using different shoppers to experience the difference in personalized product recommendations offered.</p>"},{"location":"Technical%20Guides/Personalisation%20with%20Amazon%20Personalize/RightForYou/","title":"Find out why Amazon Personalize is right for your business","text":"<p>Experience from Amazon: Over 20 years of personalization research and experience at   .</p> <p>Machine learning based personalization: Delivers higher quality product and content recommendations as well as   targeted marketing promotions using machine learning and customer\u2019s data set.</p> <p>No machine learning experience required: All of the complicated and time consuming steps required to build,   train, and deploy a machine learning personalization solution are automated.</p> <p>Personalization in days, not months: Easily integrates into your existing websites, apps, SMS, and email   marketing systems so you can implement a sophisticated and scalable personalization solution in days, rather   than months.</p> <p>Proven success in improving customer engagement and conversion: Lotte Mart, a leading South Korean retailer   with over 600K coupon mobile app users, has seen a 40% increase in the number of products a consumer has not   previously purchased. StockX, a Detroit startup company revolutionizing ecommerce with a unique Bid/Ask   marketplace, added a Recommended For You product row to the homepage using   ,   which ultimately became the top-performing homepage row. Mecca, a beauty retailer in Australia and New   Zealand, realized a 65% increase in e-mail click-through rates and a corresponding increase in email revenue   relating to the products recommended by Amazon Personalize. To personalize their customer experience further,   they are now extending the use of Amazon Personalize to additional areas including our website.</p>"},{"location":"Technical%20Guides/Personalisation%20with%20Amazon%20Personalize/RightForYou/#customer-use-case-mecca","title":"Customer use case : MECCA","text":"<p>MECCA brings our customers the best in global beauty across our retail stores and online channels in Australia and New Zealand. We\u2019ve created a unique shopping experience for our customers in our 100+ stores, with an extensive collection of products from over 100 beauty brands, and exceptional service and beauty expertise.</p> <p>\u201cAt MECCA it\u2019s about earning and keeping customer trust. We have challenged ourselves to translate our highly personalized in-store service to our online experience. A fast and effective PoC with Amazon Personalize, led by the MECCA technology and CRM teams, in collaboration with our partner Servian, demonstrated how much we could achieve without developing our own recommendation engine. Since integrating Personalize, we are seeing our customers respond positively to the new recommendations with a 65% increase in e-mail click-through rates and a corresponding increase in email revenue relating to the products recommended by Personalize. To personalize our customer experience further, we are now extending the use of Personalize to additional areas including our website.\u201c</p>"},{"location":"Technical%20Guides/Personalisation%20with%20Amazon%20Personalize/SIMSRecommendations/","title":"Related Items Recommendations","text":"<p>Amazon Personalize Recipe: SIMS</p> <p>Similar item recommendations help users discover new products or compare existing items in your catalog. Amazon Personalize recommends similar items in real-time, based on user behavior to create unique, relevant experiences for your customers.</p> <p>Pretty simple idea, implemented via item-item collaborative filtering but basically look at how people are interacting with particular things and then determine how similar things are at a global level based on that data. Not user specific at all.</p> <p>The similar item recommendations use case is implemented in all the product detail pages under \u201cCompare similar items\u201d carousel UI widget.</p>"},{"location":"Technical%20Guides/Personalisation%20with%20Amazon%20Personalize/SIMSRecommendations/#customer-use-case-stockx","title":"Customer use case : StockX","text":"<p>\u201cStockX is a Detroit startup company revolutionizing ecommerce with a unique Bid/Ask marketplace\u2014our platform models the New York Stock Exchange and treats goods like sneakers and streetwear as high-value, tradable commodities. With a transparent market experience, StockX provides access to authentic, highly sought-after products at true market price.\u201d</p> <p>\u201cRecommended for You was a massive win for both our team and StockX as a whole. We\u2019re quickly learning the potency of integrating ML into all facets of the company. Our success led to key decision-makers requesting we integrate Amazon Personalize into more of the StockX experience and expand our ML endeavors. It\u2019s safe to say that personalization is now a first-class citizen here.\u201d</p> <p>Sam Bean and Nic Roberts II at StockX.</p> <p>Read full AWS Machine Learning Blog: Pioneering personalized user experiences at StockX with Amazon Personalize</p>"},{"location":"Technical%20Guides/Personalisation%20with%20Amazon%20Personalize/SimilarItemsRecommendations/","title":"Related Items Recommendations","text":"<p>Amazon Personalize Recipe: Similar-Items with Personalized-Ranking</p> <p>Related item recommendations help users discover new products or compare existing items in your catalog. Amazon Personalize recommends related items in real-time, based on user behavior and thematically similar item attributes to create unique, relevant experiences for your customers.</p> <p>This user experience is implemented using the Similar-Items algorithm that considers co-occurrence in interactions data (how often these items appear together across user histories) and thematic similarity (what is similar about the items in your catalog) when making recommendations to better quantify similarity for less popular or new items in your catalog. The product detail page in this demo takes it a step further by using the Personalized-Ranking recipe to rerank related items recommendations for each user. This adds a level of personalization to the user experience.</p> <p>You can read more about the Similar-Items recipe on the .</p> <p>The similar item recommendations use case is implemented in all the product detail pages under the \u201cCompare similar items\u201d carousel widget. The order of items is personalized to each user by leveraging the Personalized-Ranking recipe to reorder related items based on the current user's interest.</p> <p>AWS Machine Learning Blog</p> <p>\u201cStockX is a Detroit startup company revolutionizing ecommerce with a unique Bid/Ask marketplace\u2014our platform models the New York Stock Exchange and treats goods like sneakers and streetwear as high-value, tradable commodities. With a transparent market experience, StockX provides access to authentic, highly sought-after products at true market price.\u201d</p> <p>\u201cRecommended for You was a massive win for both our team and StockX as a whole. We\u2019re quickly learning the potency of integrating ML into all facets of the company. Our success led to key decision-makers requesting we integrate Amazon Personalize into more of the StockX experience and expand our ML endeavors. It\u2019s safe to say that personalization is now a first-class citizen here.\u201d</p> <p>Sam Bean and Nic Roberts II at StockX.</p> <p>Read full AWS Machine Learning Blog: Pioneering personalized user experiences at StockX with Amazon Personalize</p>"},{"location":"Technical%20Guides/Personalisation%20with%20Amazon%20Personalize/SimilarItemsWithTheme/","title":"Related Items Recommendations with Generative AI Theme","text":"<p>Amazon Personalize Recipe:   Similar-Items   with   Content Generator</p> <p>Related item recommendations help users discover new products or compare existing items in your catalog. Amazon   Personalize recommends related items based on user behavior and thematically similar item attributes to create unique, relevant experiences   for your customers.</p> <p>This user experience is implemented using the Similar-Items algorithm that considers co-occurrence in interactions data (how often these items appear together across user histories)   and thematic similarity (what is similar about the items in your catalog) when making recommendations to better quantify similarity for less popular or new items in   your catalog. For this product detail page, the  was   used to create a descriptive theme for the set of similar items. This descriptive theme is being used as the title/label over the related items on this page. Explore the product detail   page for other featured products in the Retail Demo Store catalog to see additional generated themes.</p> <p>You can read more about the  and    on the Amazon Personalize blog.</p>"},{"location":"Technical%20Guides/Personalisation%20with%20Amazon%20Personalize/UserPersonalization/","title":"User Personalization","text":"<p>Amazon Personalize Recipe: User-Personalization</p> <p>Product and content recommendations tailored to a user\u2019s profile and habits are more likely to drive higher conversion. Amazon Personalize helps tailor recommendations to users behavior, preferences, and history, boosting their engagement and satisfaction in real-time, instead of providing a uniform experience. User personalization also handles the \u201ccold-start\u201d challenge where limited or no historical information is known about an item or user. User personalization in Amazon Personalize balances recommending fresh items with the most relevant based on a user\u2019s unique preferences and behaviors.</p> <p>User personalization is implemented in the \u201cInspired by your shopping trends\u201d section. Try using different shoppers to experience the difference in personalized product recommendations offered.</p> <p>If you\u2019re not signed in, featured products will be displayed instead.</p>"},{"location":"partner-integrations/partner-integrations/","title":"Partner integrations","text":"<p>AWS partners have developed workshop content that enable you to learn how to integrate their solutions with the Retail Demo Store and the AWS services that it relies on, such as Amazon Personalize.</p> AWS Partner Workshops Overview Workshop Links Level Duration In this workshop, you will set up tracking for Amplitude events, analyze user behavior prior to peronalization being deployed, and then measure the effects of personalization on user behavior after Personalize is deployed in the Retail Demo Store. Evaluating Personalization Performance 200 30 minutes In this workshop we will use Braze to add the ability to personalize marketing messages to customers of the Retail Demo Store using customer behavioral data and the Personalize models you trained when setting up Amazon Personalize. Personalized Email Campaigns 200 1 hour mParticle is a Customer Data Platform that allows any brand to ingest data from multiple sources in real-time, apply data quality and governance over the ingested data and orchestrate the data to any marketing and technology stack your organization is using.  In this workshop, you will configure real-time event flows to Amazon Personalize using the mParticle SDKs and then use that data to create customer profiles that can be used in marketing campaigns to customers via Braze. Real Time Personalization Events Personalized Customer Profiles and Messaging with any marketing tool (Braze) and mParticle 300 1-1.5 hours In this exercise we will define, launch, and evaluate the results of an A/B experiment of a personalized user experience using Optimizely. AB Experiments for Personalization 200 30 minutes Segment is a real-time events pipeline for customer data, as well as a customer data platform.  In the Retail Demo Store, Segment is used to deliver real-time events from the web user interface to Amazon Personalize.  These real-time events are also used to create customer profile with Amazon Personalize recommendations appended, which can then be used via the CDP to push data to marketing tools. Real Time Personalization Events Customer Data Platforms and Personalize 300 1-1.5 hours"},{"location":"workshops/hands-on-workshops/","title":"Hands on workshops","text":"<p>This project is designed to provide you with an environment in which you can learn to use AWS services to modify the behavior of an ecommerce application, based on business requirements. This can be done in a group setting or as an individual using self-paced workbooks. Currently there are workshops for adding search, personalization, experimentation frameworks, a/b testing, analytics, customer data platforms (CDPs), messaging, and more.</p> <p>In order to use the workshops, you will need to deploy the Retail Demo Store into an AWS account, using one of the methods described in the Getting Started or Developers sections below.  This is necessary because the workshops run in SageMaker Jupyter notebooks, which provide an interactive Python environment where you can execute code in the Retail Demo Store environment.</p> AWS Service Workshops Overview Workshop Links Level Duration  Amazon Personalize The Retail Demo Store uses Amazon Personalize to provide similar item recommendations, search re-ranking based on user preferences, and product recommendations based on user item interactions.  The attached workshop is a throrough walk through of the major features of Amazon Personalize, and how it can be deployed in an ecommerce application like the Retail Demo Store. Personalize Setup 300 2-2.5 hours  Amazon Pinpoint In this workshop we will use Amazon Pinpoint to add the ability to dynamically send welcome messages, abandoned cart messages, and messages with personalized product recommendations to the customers of the Retail Demo Store. Email Campaigns 200 1 hour  Amazon Lex In this module we're going to implement a conversational chatbot using Amazon Lex and integrate it into the Retail Demo Store's web UI. We'll provide some basic functionality to our chatbot such as being able to provide a return policy to users as well as wiring up the chatbot to the Amazon Personalize ML models we created in the Personalization workshop to provide personalized product recommendations to our users. Lex Chatbot 200 30 minutes  Amazon OpenSearch In this workshop, you will create a new index using Amazon OpenSearch Service and then index the Retail Demo Store product data so that users can search for products. Product Search 200 20 minutes  Amazon Location Services Create a geofence for customers approaching your physical store and send them timely pickup notifications and offers. Geofencing 300 2 hours  Amazon Alexa Incorporating Location Service, Personalize and Retail Demo Store into a hands-free ordering experience. Alexa skill deployment 300 60 minutes Experimentation In this module we are going to add experimentation to the Retail Demo Store. This will allow us to experiment with different personalization approaches in the user interface. Through notebooks in this module we will demonstrate how to implement three experimentation techniques for A/B tests. Overview A/B (400) Interleaving (400) Multi-Armed Bandit (400)"}]}