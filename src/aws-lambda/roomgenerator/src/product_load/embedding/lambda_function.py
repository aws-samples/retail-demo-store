from typing import Any
from pathlib import PurePath
from aws_lambda_powertools import Logger
from aws_lambda_powertools.utilities.typing import LambdaContext
import boto3
import base64
import json

bedrock_client = boto3.client('bedrock-runtime')
s3_client = boto3.client('s3')

logger = Logger(utc=True)

def lambda_handler(event: dict[str, Any], context: LambdaContext) -> dict[str, Any]:
    """
    Returns the embedding for the reference image using Titan multimodel embedding model through Bedrock
    """
    bucket = event['bucket']
    key = event['key']

    embedding = call_bedrock(bucket, key)
    
    return {
       "embedding" : embedding
    }

def call_bedrock(bucket, key):
    image = fetch_image(bucket, key)
    # Encode the bytes to base64
    img_base64 = base64.b64encode(image)
    # Get the category folder containing the image
    p = PurePath(key)
    img_category = p.parts[-2]

    # Convert bytes to string
    img_base64_str = img_base64.decode()
    # This could be improved as we're only passing in the category of the product, rather than the product name.
    # Alternatively, we could pass in the product caption generated by Claude 3
    body = json.dumps({
        "inputText": img_category,
        "inputImage": img_base64_str
    })

    response = bedrock_client.invoke_model(
        body=body, 
        modelId="amazon.titan-embed-image-v1",
        accept="application/json", 
        contentType="application/json"
    )

    response_body = json.loads(response['body'].read())
    embedding = response_body.get("embedding")
    return embedding

def fetch_image(bucket: str, key: str) -> bytes:
  response = s3_client.get_object(Bucket=bucket, Key=key)
  return response["Body"].read()