AWSTemplateFormatVersion: 2010-09-09

Description: >
    This template deploys the SSL/TLS selfsigned certificate for Retail Demo Store ELBs to ACM
    Author: Ronak Shah <ronakbsh@amazon.com>

Resources:
    ACMARNParameter:
        Type: AWS::SSM::Parameter
        Properties:
          Name: /retaildemostore/acm-arn
          Type: String 
          Value: Dummy
          Description: Retail Demo Store ACM Arn 
          
    ACMImportCertLambdaFunLogGroup:
        Type: AWS::Logs::LogGroup
        Properties:
          LogGroupName: !Sub /aws/lambda/${ACMimportCertLambdaFunction}
          RetentionInDays: 3
          
    ACMimportCertLambdaFunction:
        Type: AWS::Lambda::Function
        DependsOn: ACMARNParameter        
        Properties:
          Description: 'Retail Demo Store acm-import-certificate function that returns ARN for imported certificate'
          Code:
            ZipFile: |
              import boto3
              import cfnresponse
              from botocore.exceptions import ClientError
              
              response_data = {}
              
              acm_client = boto3.client('acm')
              ssm_client = boto3.client('ssm')
              
              def handler(event, context):
                response_status = cfnresponse.SUCCESS
                acmarn_param_name = '/retaildemostore/acm-arn';
                
                try:
                    
                    if event['RequestType'] == 'Create':
                        
                        # Get Self-Signed Certificate from retail-demo-store-code S3 bucket.
                        
                        s3  = boto3.resource('s3')
                        obj = s3.Object('retail-demo-store-code', 'keys/test.cert')
                        certifictate_pem = obj.get()['Body'].read()
                        
                        obj = s3.Object('retail-demo-store-code', 'keys/test.key')
                        private_key_pem = obj.get()['Body'].read()
                        
                        my_response = acm_client.import_certificate(
                          Certificate=certifictate_pem,
                          PrivateKey=private_key_pem,
                          Tags=[
                              {
                              'Key': 'ACM',
                              'Value': 'retailDemoStore'
                              },
                          ]
                        )
                        
                        # Overwrite Certificate ARN value in SSM Parameter
                        acmarn_parameter = ssm_client.put_parameter(
                            Name=acmarn_param_name,
                            Value=my_response['CertificateArn'],
                            Type='String',
                            Overwrite=True)
                            
                        response_data['certificate_arn'] = my_response['CertificateArn']
                        response_data['Message'] = "Resource creation succeeded"
                    elif event['RequestType'] == 'Update':
                        response_data['Message'] = "Resource update succeeded"
                    elif event['RequestType'] == 'Delete':
                        # Delete the cert from ACM, assumes all attachments are already removed.
                        
                        # Retrieve ACM ARN from Parameter store
                        acmarn_parameter = ssm_client.get_parameter(Name=acmarn_param_name)
                        
                        # Delete ACM
                        my_response = acm_client.delete_certificate(
                            CertificateArn=acmarn_parameter['Parameter']['Value']
                        )
                        
                        response_data['Message'] = "Resource deletion succeeded"                      
                except ClientError as e:
                  print("Error: " + str(e))
                  response_status = cfnresponse.FAILED
                  response_data['Message'] = "Resource {} failed: {}".format(event['RequestType'], e)
                cfnresponse.send(event, context, response_status, response_data)
          Handler: index.handler            
          Runtime: python3.9
          Timeout: 120
          Role: !GetAtt ACMimportCertLambdaExecutionRole.Arn
        
    ACMimportCertLambdaExecutionRole:
        Type: 'AWS::IAM::Role'
        Properties:
          AssumeRolePolicyDocument:
            Version: 2012-10-17
            Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'    
          Path: /
          Policies:
              - PolicyName: CustomPolicy
                PolicyDocument:
                  Version: 2012-10-17
                  Statement:
                  - Effect: Allow
                    Action:
                      - logs:CreateLogStream
                      - logs:DescribeLogStreams
                      - logs:PutLogEvents
                    Resource:
                      - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*'
                  - Effect: Allow
                    Action:
                      - ssm:GetParameter
                      - ssm:PutParameter
                    Resource: 
                      - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/retaildemostore/acm-arn'
                  - Effect: Allow
                    Action:
                      - acm:ImportCertificate
                      - acm:DeleteCertificate
                      - acm:AddTagsToCertificate                      
                    Resource:
                      - !Sub 'arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/*'
                  - Effect: Allow
                    Action:
                      - s3:GetObject
                    Resource: 'arn:aws:s3:::retail-demo-store-code/keys/*'
    ACMimportCertLambdaFunctionExecution:
        Type: Custom::CustomLambdaACMCert
        Version: "1.0"
        Properties:
            ServiceToken: !GetAtt ACMimportCertLambdaFunction.Arn        

Outputs:
  ACMimportCertLambdaFunctionArn:
    Description: Lambda function ARN for ACM self-signed cert function
    Value: !GetAtt ACMimportCertLambdaFunction.Arn
  ACMimportCertArn:
    Description: ACM self signed cert Arn to use in ELB listener
    Value: !GetAtt ACMimportCertLambdaFunctionExecution.certificate_arn
