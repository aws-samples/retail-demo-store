---
AWSTemplateFormatVersion: 2010-09-09

Description: >
    This template deploys the Retail Demo Store CloudFront distribution for the Web-UI and static assets.

Parameters:
  CleanupBucketLambdaArn:
    Type: String
    Description: Lambda Arn for cleanup function
  LoggingBucketName:
    Type: String
    Description: S3 Bucket For logging
  ACMCertificateArn:
    Type: String
    Description: ACM Certificate ARN for CloudFront WebUICDN
  
  ResourceBucketImages:
    Type: String
    Description: >
      (Leave empty in most cases) only specify if your product images are stored in a different bucket

  ResourceBucketImagesPrefix:
    Type: String
    Description: >
      (Leave empty in most cases) Images bucket prefix only specify if your product images are stored in a different bucket

  SourceImagesPackage:
    Type: String
    Description : full url to the images.tar.gz adress
    Default: https://code.retaildemostore.retail.aws.dev/images.tar.gz

  ResourceBucket:
    Type: String
    Description: S3Bucket Bucket where the Resources are stored (cloudformation, images, lambda code)

  ResourceBucketRelativePath:
    Type: String
    Description: S3Bucket Path where the Resources are stored (cloudformation, images, lambda code) (i.e. path/path2), can be empty if resources are at the root of the bucket. MUST contain trailing /


Conditions:
  ACMCertificateArnExists: 
    !Not [!Equals [!Ref ACMCertificateArn, '']]
  CustomResourceBucketImages: !Not [ !Equals [!Ref ResourceBucketImages, ""] ]

Resources:
  
  # Web UI infrastructure    
  WebUIBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingBucketName
        LogFilePrefix: webui-logs   
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption: 
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
            BucketKeyEnabled: true              
         

  # Empties bucket when stack is deleted
  EmptyWebUIBucket:
    Type: Custom::EmptyStackBucket
    Properties:
      ServiceToken: !Ref CleanupBucketLambdaArn
      BucketName: !Ref WebUIBucket

  WebUIBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref WebUIBucket
      PolicyDocument:
        Statement:
          - Sid: 'AllowCloudFrontServicePrincipalReadOnly'
            Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub 'arn:${AWS::Partition}:s3:::${WebUIBucket}/*'
            Principal:
              Service: 'cloudfront.amazonaws.com'
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub 'arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/${WebUICDN}'

  UIOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties: 
      OriginAccessControlConfig:
        Name: !Sub 'retaildemostore-${AWS::Region}'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
  
  UICachePolicy:  
    Type: AWS::CloudFront::CachePolicy
    Properties: 
      CachePolicyConfig:
        DefaultTTL: 86400
        MaxTTL: 31536000
        MinTTL: 86400
        Name: !Sub 'retaildemostore-${AWS::Region}'
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
          EnableAcceptEncodingGzip: true
          HeadersConfig:
            HeaderBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: all
            
  UIOriginRequestPolicy:
    Type: AWS::CloudFront::OriginRequestPolicy
    Properties: 
      OriginRequestPolicyConfig:
        CookiesConfig: 
          CookieBehavior: none
        HeadersConfig: 
          HeaderBehavior: none
        Name: !Sub 'retaildemostore-${AWS::Region}'
        QueryStringsConfig: 
          QueryStringBehavior: all



  WebUICDN:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: !Sub 'Retail Demo Store CDN for ${WebUIBucket}'
        CustomErrorResponses:
          -  ErrorCode: 403
             ResponseCode: 200
             ResponsePagePath: /index.html
        DefaultRootObject: index.html
        PriceClass: PriceClass_100
        HttpVersion: http2and3
        Origins:
          - DomainName: !GetAtt WebUIBucket.RegionalDomainName
            Id: S3
            S3OriginConfig:
              OriginAccessIdentity: ''
            OriginAccessControlId: !Ref UIOriginAccessControl
        DefaultCacheBehavior:
          TargetOriginId: S3
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: !Ref UICachePolicy
          OriginRequestPolicyId: !Ref UIOriginRequestPolicy
          ResponseHeadersPolicyId: 60669652-455b-4ae9-85a4-c4c02393f86c # id for the SimpleCORS AWS Managed response header policies:https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-response-headers-policies.html#managed-response-headers-policies-cors
        ViewerCertificate:
          !If 
            - ACMCertificateArnExists
            - AcmCertificateArn: !Ref ACMCertificateArn
              MinimumProtocolVersion: "TLSv1.2_2021"
              SslSupportMethod: "sni-only"
            - CloudFrontDefaultCertificate: true
              MinimumProtocolVersion: "TLSv1"   

  # Swagger UI infrastructure
  SwaggerUIBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingBucketName
        LogFilePrefix: swaggerui-logs   
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption: 
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
            BucketKeyEnabled: true              
              

  # Empties bucket when stack is deleted
  EmptySwaggerUIBucket:
    Type: Custom::EmptyStackBucket
    Properties:
      ServiceToken: !Ref CleanupBucketLambdaArn
      BucketName: !Ref SwaggerUIBucket

  SwaggerUIBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref SwaggerUIBucket
      PolicyDocument:
        Statement:
          - Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub 'arn:${AWS::Partition}:s3:::${SwaggerUIBucket}/*'
            Principal:
              Service: 'cloudfront.amazonaws.com'
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub 'arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/${SwaggerUICDN}'

  SwaggerUICDN:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: !Sub 'Swagger UI CDN for ${SwaggerUIBucket}'
        DefaultRootObject: index.html
        PriceClass: PriceClass_100
        HttpVersion: http2and3
        Origins:
          - DomainName: !GetAtt SwaggerUIBucket.RegionalDomainName
            Id: S3
            S3OriginConfig:
              OriginAccessIdentity: ''
            OriginAccessControlId: !Ref UIOriginAccessControl
        DefaultCacheBehavior:
          TargetOriginId: S3
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: !Ref UICachePolicy
          OriginRequestPolicyId: !Ref UIOriginRequestPolicy
          ResponseHeadersPolicyId: 60669652-455b-4ae9-85a4-c4c02393f86c

  CopyImagesLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: 'Retail Demo Store deployment utility function that copies catalog images from staging bucket to Web UI bucket'
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import tarfile
          import urllib.request
          import tempfile
          import os          

          def handler(event, context):
            print(event)

            response_data = {}
            response_status = cfnresponse.SUCCESS

            try:
              source_bucket_name = event['ResourceProperties']['SourceBucket']
              source_path = event['ResourceProperties']['SourceBucketPath']
              target_bucket_name = event['ResourceProperties']['TargetBucket']
              source_images_package = event['ResourceProperties']['SourceImagesPackage']

              if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                os.makedirs('/tmp/images', exist_ok = True)
                filename, _ = urllib.request.urlretrieve( source_images_package , '/tmp/images/images.tar.gz')              
                print(filename)
                file = tarfile.open('/tmp/images/images.tar.gz')
                file.extractall('/tmp/images/')
                file.close()
                #remove images.tar.gz
            
                os.remove('/tmp/images/images.tar.gz')

                s3 = boto3.resource('s3')
                target_bucket = s3.Bucket(target_bucket_name)
            
                # For all files in tmpdirname
                for root, dirs, files in os.walk('/tmp/images'):
                  for filename in files:
                    local_path = os.path.join(root, filename)
                    relative_path = os.path.relpath(local_path, '/tmp/images')
                    s3_path = os.path.join('images/', relative_path)
                    # Upload file to target bucket
                    target_bucket.upload_file(local_path, s3_path)
  
                response_data['Message'] = "Resource creation succeeded"
              elif event['RequestType'] == 'Delete':
                response_data['Message'] = "Resource deletion succeeded"

            except Exception as e:
              print("Error: " + str(e))
              response_status = cfnresponse.FAILED
              response_data['Message'] = "Resource {} failed: {}".format(event['RequestType'], e)

            cfnresponse.send(event, context, response_status, response_data)

      Handler: index.handler
      Runtime: python3.12
      EphemeralStorage:
           Size: 2048
      Timeout: 900
      MemorySize: 1024
      Role: !GetAtt CopyImagesLambdaExecutionRole.Arn

  CustomCopyImagesLambdaFunction:
    Type: Custom::CopyImagesToWebUI
    Properties:
      ServiceToken: !GetAtt CopyImagesLambdaFunction.Arn
      SourceBucket:
          !If [
            CustomResourceBucketImages,
            !Ref ResourceBucketImages,
            !Ref ResourceBucket
          ]
      SourceBucketPath:
          !If [
            CustomResourceBucketImages,
            !Ref ResourceBucketImagesPrefix,
            !Ref ResourceBucketRelativePath
          ]
      TargetBucket: !Ref WebUIBucket
      SourceImagesPackage: !Ref SourceImagesPackage

  CopyImagesLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: LoggingPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
        - PolicyName: S3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Fn::If:
                - CustomResourceBucketImages
                - Effect: Allow
                  Action:
                    - s3:List*
                    - s3:GetObject
                    - s3:PutObject
                  Resource:
                    - !Sub arn:${AWS::Partition}:s3:::${ResourceBucketImages}/*
                    - !Sub arn:${AWS::Partition}:s3:::${ResourceBucketImages}
                    - !Sub arn:${AWS::Partition}:s3:::${WebUIBucket}
                    - !Sub arn:${AWS::Partition}:s3:::${WebUIBucket}/*
                - Effect: Allow
                  Action:
                    - s3:List*
                    - s3:GetObject
                    - s3:PutObject
                  Resource:
                    - !Sub arn:${AWS::Partition}:s3:::${ResourceBucket}/*
                    - !Sub arn:${AWS::Partition}:s3:::${ResourceBucket}
                    - !Sub arn:${AWS::Partition}:s3:::${WebUIBucket}
                    - !Sub arn:${AWS::Partition}:s3:::${WebUIBucket}/*

Outputs:
  # Web UI outputs
  WebUIBucketName:
    Description: Web UI S3 bucket for CloudFront distribution.
    Value: !Ref WebUIBucket

  WebUICDN:
    Description: CloudFront distribution ID for the Web UI CDN
    Value: !Ref WebUICDN

  # Since the Retail Demo Store web service load balancers are not deployed with SSL, 
  # the Web UI URL must be http to avoid mixed content errors in the browser.
  WebUICDNURL:
    Description: The URL for the web application
    Value: !Sub 
      - 'https://${Domain}'
      - Domain: !GetAtt WebUICDN.DomainName    

  # Swagger UI outputs
  SwaggerUIBucketName:
    Description: Swagger UI S3 bucket for CloudFront distribution.
    Value: !Ref SwaggerUIBucket

  SwaggerUICDN:
    Description: CloudFront distribution ID for the Swagger UI CDN
    Value: !Ref SwaggerUICDN

  # Since the Retail Demo Store web service load balancers are not deployed with SSL, 
  # the Swagger UI URL must be http to avoid mixed content errors in the browser.
  SwaggerUICDNURL:
    Description: The URL for the Swagger UI application
    Value: !Sub 
      - 'https://${Domain}'
      - Domain: !GetAtt SwaggerUICDN.DomainName
