---
AWSTemplateFormatVersion: 2010-09-09

Description: >
    This template deploys specific resources for Products for the Retail Demo Store Services.
    Author: Bastien Leblanc <bastil@amazon.co.uk>

Parameters:
  ProductsServiceUrl:
    Type: String
  LambdaVpcSecurityGroup:
    Type: String  
  LambdaVpcSubnets:
    Type: String

Resources:

  LoadDataLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  LoadDataLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: 'Retail Demo Store deployment utility function that calls the product service init endpoint to load product and category information into DynamoDB tables'
      Handler: index.handler
      Role: !GetAtt LoadDataLambdaRole.Arn
      Runtime: python3.11
      MemorySize: 128
      Timeout: 120
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaVpcSecurityGroup
        SubnetIds: !Split [",", !Ref LambdaVpcSubnets]
      Environment:
        Variables:
          ProductsServiceUrl: !Ref ProductsServiceUrl
      Code:
        ZipFile: |
          from urllib.request import Request, urlopen
          from urllib.error import URLError
          import logging
          import cfnresponse
          import os

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
            response_data = {}
            response_status = cfnresponse.SUCCESS

            if event['RequestType'] in ['Create', 'Update']:     
              url = os.environ['ProductsServiceUrl']
              request = Request(f"{url}/init", method='POST')
              try:
                with urlopen(request) as response:
                  logger.info(f"Product Service init method success: {response.read()}")
              except URLError as e:
                logger.error(f"Error calling product service init: {e.code} : {e.reason}")
                response_status = cfnresponse.FAILED
                response_data['Message'] = f"Resource {event['RequestType']} failed: {e}"
                            
            cfnresponse.send(event, context, response_status, response_data)
  
  CustomLoadDataProducts:
    Type: Custom::CustomLoadData
    Properties:
      ServiceToken: !GetAtt LoadDataLambdaFunction.Arn

Outputs:
  LoadDataLambdaFunction:
    Value: !Ref LoadDataLambdaFunction
